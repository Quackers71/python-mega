# Add this to your ~/.bashrc if you wish

# Q Alias commands
alias ..="cd .."
alias qh="cd /home/Quackers/"
alias l="ls -la"
alias ll="ls -la"
                                                                                                                                                                                       
alias gs="git status"
alias gpus="git push"
alias gpo="git push origin $1"
alias ga.="git add ."
alias gaa="git add --all"
alias gcm="git commit -m $1"
alias gcam="git commit -am $1"
alias gdf="git diff $1"
alias gpul="git pull"
alias grh="git reset --hard $1"
alias gl="git log"
alias glg='git log --pretty=format:"%h %s" --graph'
alias gc="git checkout $1"


Source: The Python Mega Course: https://udemy.com/the-python-mega-course/

https://youtu.be/azcrPFhaY9k - How To Think Like A Programmer
# used for simpleCalc.py & keepGoing.py

## Section 3: The Basics: Data Types

# Variables and Coding Excercise 1 & 2

Coding Excercise 1: Your First Python Excercise (E)
Assign a value to x in the first line, and print out the variable value in the second.

1 x = 1
2 print(x)
3 


Coding Excercise 2: Assign Multiple Values and Print (E)
Assign some values to variables x, y, and z.  Then insert x, y, and z inside a print() function to print out
the values of those variables.

1 x = 1
2 y = 2
3 z = 3
4 print(x, y, z)


Coding Excercise 3: Create Integers, Strings, and Floats (E)
Create three variables mood, strength, and rank and assign a string to mood, a float to strength, and an integer
to rank.  The values you assign can be anything as long as they are the correct type.

1 mood = "god"
2 strength = 52.4
3 rank = 100


Coding Excercise 4: Sum Up Numbers (E)
Assign numbers to x, y, and z.  Calculate the sum of x, y, and z in s.  Print out the value of s.

1 x = 22
2 y = 80.08
3 z = 55
4 s = x + y + z
5 print(s)

13. Ranges
See Ranges.py

Coding Excercise 5: Create List (E)
Assign a list to variable temperatures.  The list should contain a float, integer & a string

temperatures = [13.34, 6, "Hello"]


Coding Excercise 6: Create Complex List (E)
Assign a list to variable rainfall.  The list should contain a float, integer, a string & a list

rainfall = [15.50, 60, "Yo Bitches!", ["Help", 14, 50, 1009.6]]

14. Type Attributes - Output

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section3\typeAttributes.py
Student #1 scored: 9.1

dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__',
 '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__',
 '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__',
 '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count',
  'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']

dir(int)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__',
'__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__',
'__hash__', '__index__', '__init__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__',
'__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__',
'__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__',
'__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__',
'__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag',
 'numerator', 'real', 'to_bytes']     

dir(float)
['__abs__', '__add__', '__bool__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__',
'__floordiv__', '__format__', '__ge__', '__getattribute__', '__getformat__', '__getnewargs__', '__gt__', '__hash__',
'__init__', '__int__', '__le__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__',
'__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__',
'__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setformat__', '__sizeof__', '__str__', '__sub__', '__subclasshook__',
 '__truediv__', '__trunc__', 'as_integer_ratio', 'conjugate', 'fromhex', 'hex', 'imag', 'is_integer', 'real']

dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__',
'__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__',
'__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__',
'__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map',
'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle',
'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex','rjust', 'rpartition',
'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

help(str.upper)
Help on method_descriptor:

upper(...)
    S.upper() -> str

    Return a copy of S converted to uppercase.


help(str.title)
Help on method_descriptor:

title(...)
    S.title() -> str

    Return a titlecased version of S, i.e. words start with title case
    characters, all remaining cased characters have lower case.


"hello".upper()
HELLO

Hello World!

15. Did You Know?
Python got his name not from the snake, but from Monty 
Python's Flying Circus, a favorite comedy series of Guido 
van Rossum, the creator of Python.

16. How to find out what code you need

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section3\listFunctions.py
print(1) is a built-in function
'hello'.upper() is a method
To view a full list of built-in functions use 'dir(__builtins__)'
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError',
'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError',
'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError',
'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError',
'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None',
'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning',
'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',
'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError',
'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError',
'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__build_class__', '__debug__',
'__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool',
'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir',
'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash',
'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max',
'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed',
'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section3\listTypes2.py   
Student #1 scored: 9.1
sum(student_grades) :  25.4
len(student_grades) :  3
The mean of the student_grades :  8.466666666666667

17. Steps of Learning Python

1. Learning the Syntax
2. Knowing the data structure i.e. List or Dict
3. algorithms i.e. using functions and calculations
   https://fiftyexamples.readthedocs.io/en/latest/algorithms.html


Coding Excercise 7: Calculate Maximum (E)

Complete the script so that it prints out the maximum value of student_grades. 
Find the appropiate function or method.

student_grades = [9.1, 8.8, 7.5]
max_value = max(student_grades)
print(max_value)


Coding Excercise 8: Count Values (E)

Find the proper function or method that counts how many 10.0 items there are in the student_grades and 
print out the output using a print() function.

student_grades = [9.1, 8.8, 10.0, 7.7, 6.8, 8.0, 10.0, 8.1, 10.0, 9.9]
print(student_grades.count(10.0))


Coding Excercise 9: Modify String (E)

Find the proper function or method that converts the string in username into lowercase letters and 
prints out the output.

username = "Python3"
print(username.lower())

19. Did You Know?
Did you know that Python was first released in  1991?
Python 2 was released in 2000, and Python 3 (the current 
version) in 2008.


Coding Excercise 10: Create Dictionary (E)
Assign dict to variable day_temperatures. The dict should contain three keys, each key should
have a float as the value

day_temperatures = {"morning": 9.00, "noon": 12.00, "evening": 18.00}

20. Tuple Types

monday_temperatures = {1, 4, 5}   Tuple = immutable
monday_temperatures2 = [1, 4, 5]   List = mutable # meaning you can add more items to the list
monday_temperatures2.append(6)

# Output
PS C:\Users\fcukq\Desktop\python-mega> py -3 .\Section3\tupleTypes.py
This is a Tuple
monday_temperatures = {1, 4, 5}
{1, 4, 5}

Three Tuples as items
monday_temperatures = ((2,20, 200), (6, 60, 600), (9, 90, 900))
((2, 20, 200), (6, 60, 600), (9, 90, 900))

Tuples are immutable meaning they cannot be changed

This is a List
monday_temperatures2 = [1, 4, 5]
[1, 4, 5]

monday_temperatures2.append(9)
The List is now:  [1, 4, 5, 9]

Lists and Dictonaries are mutable

This is a Dictionary
monday_temperatures3 = {"temp1": 1, "temp2": 4, "temp3": 5}
{'temp1': 1, 'temp2': 4, 'temp3': 5}

output of the dict.values in a for loop
1
4
5


Coding Excercise 11: Create Tuple (E)
Create a color_codes variable and assign a tuple to it.  The Tuple should contain three tuples as items.

color_codes =  ((2,20, 200), (6, 60, 600), (9, 90, 900))


Coding Excercise 12: Create Complex Dictionary (E)
Assign a dictionary to variable day_temperatures.  The dictionary should contatin three keys: 'morning', 
'noon', and 'evening' and each key should contain a tuple as value.  Each tuple should contain three floats.

day_temperatures = {'morning': (1.2, 1.3, 1.4), 'noon': (2.2, 2.3, 2.4) , 'evening': (5.2, 5.3, 5.4)}

22. Did You Know?
Python is mainly used for automation purposes, web apps, and data science.
Many big companies like Instagram, Facebook, and Amazon use Python in different 
parts of their products. For example, Facebook uses Python to process images.


23. Summary: Integers, Floats, Lists, Dictionaries, Tuples, dir, help
In this section you learned that:

Integers are for representing whole numbers:

rank = 10
eggs = 12
people = 3
Floats represent continuous values:

temperature = 10.2
rainfall = 5.98
elevation = 1031.88
Strings represent any text:

message = "Welcome to our online shop!"
name = "John"
serial = "R001991981SW"
Lists represent arrays of values that may change during the course of the program:

members = ["Sim Soony", "Marry Roundknee", "Jack Corridor"]
pixel_values = [252, 251, 251, 253, 250, 248, 247]
Dictionaries represent pairs of keys and values:

phone_numbers = {"John Smith": "+37682929928", "Marry Simpons": "+423998200919"}
volcano_elevations = {"Glacier Peak": 3213.9, "Rainer": 4392.1}
Keys of a dictionary can be extracted with:

phone_numbers.keys()
Values of a dictionary can be extracted with:

phone_numbers.values()
Tuples represent arrays of values that are not to be changed during the course of the program:

vowels = ('a', 'e', 'i', 'o', 'u')
one_digits = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
To find out what attributes a type has:

dir(str)
dir(list)
dir(dict)
To find out what Python builtin functions there are:

dir(__builtins__)
Documentation for a Python command can be found with:

help(str)
help(str.replace)
help(dict.values)

## Section 4: The Basics: Operations with Data Types

25. More Operations with Lists

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python
Python 3.5.0 (v3.5.0:374f501f4567, Sep 13 2015, 02:27:37) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> monday_temperatures = [9.1, 8.8, 7.5]
>>> monday_temperatures.append(8.1)  
>>> monday_temperatures
[9.1, 8.8, 7.5, 8.1]
>>> monday_temperatures.clear()     
>>> monday_temperatures
[]  
>>> monday_temperatures = [9.1, 8.8, 7.5]
>>> monday_temperatures                   
[9.1, 8.8, 7.5]
>>> monday_temperatures.index(8.8) 
1   
>>> monday_temperatures.index(8.8, 1) 
1   
>>> monday_temperatures.index(8.8, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 8.8 is not in list
>>>


Coding Excercise 13: Append Item to List (E)
Append the value if current to the end of the list seconds. Please use the list.append() method to do that.

seconds = [1.2323442655, 1.4534345567, 1.023458894]
current = 1.10001399445
seconds.append(current)


Coding Excercise 14: Remove Item from List (E)
Remove item 1.4534345567 from seconds

seconds = [1.2323442655, 1.4534345567, 1.023458894, 1.10001399445]
seconds.remove(1.4534345567)


Coding Excercise 15: Remove Three Items from List (E)
Remove Items 1.4534345567, 1.023458894 ,and 1.10001399445 from seconds

seconds = [1.2323442655, 1.4534345567, 1.023458894, 1.10001399445]
seconds = [1.2323442655, 1.4534345567, 1.023458894, 1.10001399445]
seconds.remove(1.4534345567)
seconds.remove(1.023458894)
seconds.remove(1.10001399445)

26. Accessing List Items

>>> monday_temperatures.__getitem__(1)
8.8
>>> monday_temperatures[1]             
8.8
>>>

Coding Excercise 16: Access Item (E)
Complete the script so that it prints out the 3rd item of list serials

serials = ["RH80810A", "AA899819A", "XYSA9099400", "OOP8988459", "EEO8904882", "KOC9889482"]
print(serials[2])

Coding Excercise 17: Access Items (E)
Complete the script so that it prints out the 1st, the 3rd, and the 6th items of list serials

serials = ["RH80810A", "AA899819A", "XYSA9099400", "OOP8988459", "EEO8904882", "KOC9889482"]
print(serials[0], serials[2], serials[5])

Coding Excercise 18: Access and Append (E)
Append the first item of weekend to workdays.

workdays = ["Mon", "Tue", "Wed", "Thu", "Fri"]
weekend = ["Sat", "Sun"]
workdays.append(weekend[0])

27. Accessing List Slices 

>>> monday_temperatures = [9.1, 8.8, 7.5, 6.6, 9.9] 
>>> len(monday_temperatures)
5
>>> monday_temperatures[2]     
7.5
>>> monday_temperatures[1:4] 
[8.8, 7.5, 6.6]
>>> monday_temperatures[3:5] 
[6.6, 9.9]
>>> monday_temperatures[3:]  
[6.6, 9.9]
>>> monday_temperatures[0:2] 
[9.1, 8.8]
>>> monday_temperatures[:2]
[9.1, 8.8]

28. Accessing Items and Slices with Negative Indexes

>>> monday_temperatures[-1] 
9.9
>>> monday_temperatures[-2:] 
[6.6, 9.9]
>>> monday_temperatures[-4:-2] 
[8.8, 7.5]

29. Accessing Characters and Slices in Strings

>>> mystring = "Hello"
>>> mystring[1]
'e'
>>> mystring[-1] 
'o'
>>> mystring[:3] 
'Hel'
>>> monday_temperatures = ['hello', 1, 2, 3]
>>> monday_temperatures[0]    
'hello'
>>> monday_temperatures[0][2]
'l'

Quiz 1: Accessing and Slicing Listrs and Strings

Question 1:
What would the following code return?
'abcdef'[:3]
Answer: 'abc'

Question 2:
Which of the following outputs 'cd'?
Answer: 'abcdef'[2:4]

Question 3:
Select the correct output for 'abcdef'[-2:]
Answer: 'ef'

Question 4:
What does the code ['abc' , 'def', 'ghi', 'jkl', 'mno'][-2][-2] output?
Answer: 'k'

Great job! You are ready to move on to the next lecture.
You got 4 out of 4 correct on the first attempt.


Coding Excercise 19: Slicing a List, 2nd to 4th (E)
Print out the slice ['b', 'c', 'd'] of the letters list

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(letters[1:4])


Coding Excercise 20: Slicing a List, First Three (E)
Print out the slice ['a', 'b', 'c'] of the letters list

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(letters[:3])


Coding Excercise 21: Slicing a List, Last Three (E)
Print out the slice ['e', 'f', 'g'] of the letters list

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(letters[-3:])

30. Accessing Items in Dictionaries

>>> student_grades = {"Kylie": 9.1, "Eva": 8.8, "Tarquin": 7.5}
>>> student_grades.keys() 
dict_keys(['Kylie', 'Tarquin', 'Eva'])
>>> student_grades.values() 
dict_values([9.1, 7.5, 8.8])
>>> eng_port = {"rain": "chuva", "sun": "sol"}
>>> eng_port["sun"]
'sol'


31. Summary: Positive/Negative Indexes, Slicing
In this section you learned that:

Lists, strings, and tuples have a positive index system:

["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
   0      1      2      3      4      5      6
And a negative index system:

["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
  -7     -6     -5     -4     -3     -2     -1
In a list, the 2nd, 3rd, and 4th items can be accessed with:

days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
days[1:4]
Output: ['Tue', 'Wed', 'Thu']
First three items of a list:

days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
days[:3]
Output:['Mon', 'Tue', 'Wed'] 
Last three items of a list:

days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
days[-3:]
Output: ['Fri', 'Sat', 'Sun']
Everything but the last:

days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
days[:-1] 
Output: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'] 
Everything but the last two:

days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
days[:-2] 
Output: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'] 
A single in a dictionary can be accessed using its key:

phone_numbers = {"John Smith":"+37682929928","Marry Simpsons":"+423998200919"}
phone_numbers["Marry Simpsons"]
Output: '+423998200919'

# Section 5: The Basics: Functions and Conditionals


Coding Excercise 22: Lengther (E)
Complete the lengther function definition so that is returns the number of items for every input 1st.
Note. You don't have to call the function unless you are explicitly required to do so.  Definin the 
function is enough.  However, if you like to call your function under your function definition, that's
fine too.

def lengther(lst):
    return len(lst)


Coding Excercise 23: Square Area (E)
Define a function that calculates the area of a sqaure.
For example, if I was to call your function with foo(7) the output would be 49.  If I called it with 
foo(3) it would return 9, and so on.
Note that you don't have to name your function foo.  Give it any name you want.

def foo(i):
    i = i * i
    return i

Solution.py was

def foo(a):
    return a * a


Coding Excercise 24: Volume Converter (E)
Define a function that converts fluid ounces to mililitres knowing that 1 fluid ounce is equal to 29.57353 
mililitres.  For example, I was to call your function with foo(1) I would get an output of 29.57353.  If I
called it with foo(5) I would get 147.86765, and so on.

def foo(oz):
    return oz * 29.57353

33. Print or Return?
.\Section5\mean.py  # updated
N.B. Always use return in your functions

34. Intro to Conditionals

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section5\mean.py
Function started!
Traceback (most recent call last):
  File ".\Section5\mean.py", line 7, in <module>
    print(mean(student_grades))
  File ".\Section5\mean.py", line 3, in mean
    the_mean = sum(mylist) / len(mylist)
TypeError: unsupported operand type(s) for +: 'int' and 'str'

35. If Conditional Example
.\Section5\mean.py  # updated
Now contains an if / else

36. Bonus Code: Using "and" and "or" in a Conditional

You learned to check for one single condition:
x = 1
 
if x == 1:
    print("Yes")
else:
    print("No")

You can also check if two conditions are met at the same time using an and operator:
x = 1
y = 1
 
if x == 1 and y==1:
    print("Yes")
else:
    print("No")
That will return Yes since x == 1 and y ==1 are both True.

You can also check if one of two conditions are met using an or operator:
x = 1
y = 1
 
if x == 1 or y==2:
    print("Yes")
else:
    print("No")
That will return Yes since at least one of the conditions is True. In this case x == 1 is True.

37. Conditional Explained Line by Line
.\Section5\mean.py  # updated
Now running the function for the dictionary

Quiz 2. Conditionals Quiz

Question 1:
What does the following code output?

x = -10
if x * 2 > x:
    print("Greater")
else:
    print("Less or Equal")

Answer: Less or Equal
x is -10 and x * 2 would be -20 and -20 is not greater than -10.

Question 2:
What would the following code output?

def foo(x, array):
    if x in array:
        return True
    else:
        return False
 
print(foo(1, [1, 2, 3]))
print(foo(1, [2, 3]))
print(foo(1, ['1', 2, 3]))

Answer:
True
False
False
1 is actually in the list [1, 2, 3], therefore, the first output is True. 1 is not in [2, 3], 
so the second output is False. 1 is not in ['1', 2, 3], so the third output is also False. 
Note the third list has '1', but not 1. 1 is not the same as '1'. They are of different types.

Question 3:
Check the code that has a correct syntax.

Answer: #4 
def check_username(username):
    if len(username) > 4:
        return "Successfull!"
    else:
        return "Try another username"

Question 4:
What is true about the following code?

if isinstance(x, int) or isinstance(x, float) or x=='1':
    print("Valid type!")
else:
    print("Not valid!")

Answer: The code prints out Valid type! if x has a value of '1'.
Correct! If any of the conditions in line 1 is met, the code will execute line 2. In other words, 
if x has a value of '1' that means one of the conditions in line 1 was met.

Great job! You are ready to move on to the next lecture.
You got 4 out of 4 correct on the first attempt.

38. More on Conditionals

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section5\mean.py
mean(student_grades) : 8.466666666666667
3 is greater than 1
type(3) == int : True
isinstance(3, int) : True


Coding Excercise 25: Password Controller (E)
Define a function that:
(1) takes a string as a parameter
(2) returns False if the string contains less than 8 characters
(3) returns True if the string contains 8 or more characters
If I called your function with foo(mypass) it would return.  If I called it foo("mylongpassword") 
it would return True, and so on.


Coding Excercise 26: Warm or Cold (E)
Define a function that:
(1) takes a temperature as a parameter
(2) returns Warm if the temperature is greater than 7
(3) returns Cold if the temperature is equal or less than 7
If I called your function with foo(10) it would return Warm.  If I called it foo(7) or foo(5)
it would return Cold in both cases, and so on.


Coding Excercise 27: Hot, Warm, Cold (E)
Define a function that:
(1) takes a temperature as a parameter
(2) returns Hot if the temperature is greater than 25
(3) returns Warm if the temperature is between 15 and 25, including 15 and 25.
(4) returns Cold if the temperature is less than 15
If I called your function with foo(10) it would return Cold.  
foo(15) or foo(16) or foo(25) would all return Warm and foo(26) would return Hot.


41. Summary of Section5: Functions and Conditionals
In this section you learned to:

Define a function:

def cube_volume(a):
    return a * a * a
Write a conditional block:

message = "hello there"
 
if "hello" in message:
    print("hi")
else:
    print("I don't understand")
Write a conditional block of multiple conditions:

message = "hello there"
 
if "hello" in message:
    print("hi")
elif "hi" in message:
    print("hi")
elif "hey" in message:
    print("hi")
else:
    print("I don't understand")
Use the and operator to check if both conditions are True at the same time:

x = 1
y = 1
 
if x == 1 and y==1:
    print("Yes")
else:
    print("No")
Output is Yes since both x and y are 1.

Use the or operator to check if at least one condition is True:

x = 1
y = 2
 
if x == 1 or y==2:
    print("Yes")
else:
    print("No")
Output is Yes since x is 1.

Check if a value is of a certain type with:

isinstance("abc", str)
isinstance([1, 2, 3], list)
or

type("abc") == str
type([1, 2, 3]) == lst

# Section 6: The Basics: Processing User Input

42. User Input
PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section6\userInput.py
Enter a temperature :7
Cold
PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section6\userInput.py
Enter a temperature :7.2
Warm


Coding Excercise 28: String Formatting (E)

Implement a function that gets a person's name as a parameter and greets the person with Hi Person. For example, 
if I called your function with foo("Smithy") the function should return Hi Smithy.

Note: If you were to use the f"string" syntax for this exercise you would get an error because f-strings were
introduced in Python 3.6 and the Udemy server uses Python 3.5.  You might want to use the "%s" syntax instead 
which works with the older versions of Python.  This scenario actually happens often in real lift where servers 
might have an older version of Python so you should be aware and adjust your code accordingly.  You can review 
the string formatting lecture if you forgot the syntax. 
- https://www.udemy.com/course/the-python-mega-course/learn/lecture/15584244#overview

def foo(name):
    return "Hi %s" % name

foo("Smithy")


Coding Excercise 29: String Formatting and Uppercase (E)

Implement a function that gets a person's name as a parameter and greets the person with Hi Person. The first 
letter should always be uppercase.  For example, if I called your function with foo("Smithy") or foo("smithy")
the function should return Hi Smithy.

Note: If you were to use the f"string" syntax for this exercise you would get an error because f-strings were
introduced in Python 3.6 and the Udemy server uses Python 3.5.  You might want to use the "%s" syntax instead 
which works with the older versions of Python.  This scenario actually happens often in real lift where servers 
might have an older version of Python so you should be aware and adjust your code accordingly.  You can review 
the string formatting lecture if you forgot the syntax. 
- https://www.udemy.com/course/the-python-mega-course/learn/lecture/15584244#overview

def foo(name):
    return "Hi %s" % name.title()

foo("smithy")


45. Summary: Processing User Input
In this section you learned that:

A Python program can get user input via the input function:

The input function halts the execution of the program and gets text input from the user:

name = input("Enter your name: ")
The input function converts any input to a string, but you can convert it back to int or float:

experience_months = input("Enter your experience in months: ")
experience_years = int(experience_months) / 12
You can format strings with (works both on Python 2 and 3):

name = "Sim"
experience_years = 1.5
print("Hi %s, you have %s years of experience." % (name, experience_years))

Output: Hi Sim, you have 1.5 years of experience.

You can also format strings with (Python 3 only):

name = "Sim"
experience_years = 1.5
print("Hi {}, you have {} years of experience".format(name, experience_years))

Output: Hi Sim, you have 1.5 years of experience.


Coding Excercise 30: Loop Over Colours (E)
Loop over the colours items and print the item in every loop.  So, the expected
output of your code would be:
11
34
98
43
45
54
54

colours = [11, 34, 98, 43, 45, 54, 54]

for cl in colours:
    print(cl)


Coding Excercise 31: Loop Over Big Colours (E)
Loop over the colours items and print the item in every loop only if the item is greater then 50.  
So, the expected output of your code would be:
98
54
54

colours = [11, 34, 98, 43, 45, 54, 54]

for cl in colours:
    if cl > 50:
        print(cl)


Coding Excercise 32: Loop Over Integer Colours (E)
Loop over the colours items and print the item in every loop only if the item is an integer.  
So, the expected output of your code would be:
11
43
54
54

colours = [11, 34.1, 98.2, 43, 45.1, 54, 54]

for cl in colours:
    if isinstance(cl, int):
        print(cl)


Coding Excercise 33: Loop Over Integer and BIg Colours (E)
Loop over the colours items and print the item in every loop only if the item is an integer and 
is greater than 50.  So, the expected output of your code would be:
54
54

colours = [11, 34.1, 98.2, 43, 45.1, 54, 54]

for cl in colours:
    if isinstance(cl, int):
        print(cl)

47. For Loop Over a Function
Note that using loops you can call any function multiple times, even your own functions. Let's suppose we defined this function:

def celsius_to_kelvin(cels):
    return cels + 273.15
That is a function that gets a number as input, adds 273.15 to it and returns the result. A for loop allows us to execute that function over a list of numbers:

monday_temperatures = [9.1, 8.8, -270.15]
 
for temperature in monday_temperatures:
    print(celsius_to_kelvin(temperature))
The output of that would be:

282.25
281.95
3.0

So, in the first iteration celsius_to_kelvin(9.1) was executed, in the second celsius_to_kelvin(8.8) and in the third celsius_to_kelvin(-270.15).

That's just something to keep in mind.

48. Did You Know?
Python comes pre-installed on Linux and Mac operating systems. In May 2019, Windows 10 also launched an update which also have Python pre-installed. 
That is an added endorsement for Python.

50. Bonus Code: Dictionary Loop and String Formatting
You can combine a dictionary for loop with string formatting to create text containing information from the dictionary:

phone_numbers = {"John Smith": "+37682929928", "Marry Simpons": "+423998200919"}
 
for pair in phone_numbers.items():
    print("{} has as phone number {}".format(pair[0], pair[1]))


Another (better) way to do it::

phone_numbers = {"John Smith": "+37682929928", "Marry Simpons": "+423998200919"}
 
for key, value in phone_numbers.items():
    print("{} has as phone number {}".format(key, value))
In both cases the output is:

Output:

John Smith has as phone number +37682929928

Marry Simpons has as phone number +423998200919


Coding Excercise 34: Loop Over Dictionary and Format (E)

Make the code print out the following output using a for loop:

John Smith: +37682929928
Marry Simpons: +423998200919

So, the code should loop over the dictionary items and in each iteration should print 
out the dictionary key, a colon, a space, and the corresponding value.

Note: If you plan to use string formatting here, please be aware that Udemy uses Python 
3.5 and the f"{}" syntax only works with Python 3.6+. Consider using the "%s" syntax instead.

phone_numbers = {"John Smith": "+37682929928", "Marry Simpons": "+423998200919"}

for details in phone_numbers.items():
    print("%s: %s" % (details[0], details[1]))


Coding Excercise 35: Loop Over Dictionary and Replace (E)

Loop over the phone_numbers values and in each loop print out the phone number, but 
with '00' instead of '+'.  In other words, your code should output:

0037682929928
00423998200919

phone_numbers = {"John Smith": "+37682929928", "Marry Simpons": "+423998200919"}

for details in phone_numbers.items():
    print("%s" % (details[1]).replace('+', '00'))
    #print("{}").format(details[1]).replace('+', '00')

Quiz 3. While loops

Question 1:
What will the following code output?

a = 10
while a > 0:
    x = a + 1
    print(x)

Answer: 
11
11
11
11
11

Good job!
The while loop checks if a is greater than 0. That's always true since a is 10. 
Then the loops performs x = 10 + 1 and then prints x which happens to be 11, always.

Question 2:
What does the following code output?

a = 0
while a < 5:
    a = a + 1
    print(a)

Answer: 
1
2
3
4
5

Good job!
At first a is 0. The loop checks if a is less than 5, which is true in the first iteration. 
Then, a = a + 1 adds 1 to a, so now a is 1 and 1 is printed out. The next loop does a = 1 + 1 so a becomes 2. 
The third loop does a = 2 + 1, so a becomes 3 and so the loop continues until a is not less than 5 anymore.

Great job! You are ready to move on to the next lecture.
You got 2 out of 2 correct on the first attempt.


54. Summary: Loops
In this section you learned that:

For loops are useful for executing a command over a large number of items.

You can create a for loop like so:

for letter in 'abc':
    print(letter.upper())
Output:

A
B
C

The name after for (e.g. letter) is just a variable name



You can loop over dictionary keys:

phone_numbers = {"John Smith":"+37682929928","Marry Simpons":"+423998200919"}
for value in phone_numbers.keys():
    print(value)
Output:

John Smith
Marry Simpsons

You can loop over dictionary values:

phone_numbers = {"John Smith":"+37682929928","Marry Simpons":"+423998200919"}
for value in phone_numbers.values():
    print(value)
Output:

+37682929928
+423998200919

You can loop over dictionary items:

phone_numbers = {"John Smith":"+37682929928","Marry Simpons":"+423998200919"}
for key, value in phone_numbers.items():
    print(key, value)
Output: 

('John Smith', '+37682929928')

('Marry Simpons', '+423998200919')



While loops will run as long as a condition is true:

while datetime.datetime.now() < datetime.datetime(2090, 8, 20, 19, 30, 20):
    print("It's not yet 19:30:20 of 2090.8.20")
The loop above will print out the string inside print() over and over again until the 20th of August, 2090.

Tested the above using:

import datetime

while datetime.datetime.now() < datetime.datetime(2020, 2, 29, 9, 40, 00):
    print("It's not yet 09:40:00 of 2020.2.29")

Output:

It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
PS C:\Users\fcukq\Desktop\python-mega\Section7> date

29 February 2020 09:40:02

Section 8: Building a Program

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section8> py -3 .\textPro.py
Say something: Hello
Say something: how are you
Say something: what day again
Say something: why me
Say something: bye
Say something: \end
Hello. How are you? What day again? Why me? Bye.

Section 9: List Comprehensions

60. Simple List Comprehension

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section9> py -3 .\preListComprehension.py 
[22.1, 23.4, 34.0, 23.0]

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section9> py -3 .\listComprehension.py
[22.1, 23.4, 34.0, 23.0]


Coding Excercise 36: Only Numbers (E)

Define a function that takes as a parameter list that contains both numbers and strings and 
returns the list containing only the numbers.  For example, if I called your function with 
foo([99, 'no data', 95, 94, 'no data']) it should return [99, 95, 94].

def foo(lst):
    return [i for i in lst if not isinstance(i, str)]
    
foo([99, 'no data', 95, 94, 'no data'])

Ex 36. Alternative way to solve and output the values below:

def foo(lst):
    nums = []
    for i in lst: 
        if not isinstance(i, str):
            nums.append(i)
            print(i)
    return nums

foo([99, 'no data', 95, 94, 'no data'])

""" For comparison, here is a different way to solve this quiz-challenge. 
It uses both a for-loop and an if-test. The solution loops and appends 
only the numeric values from lst to a 2nd list variable that I've named nums: """

Output:
PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section9> py -3 .\listCompTest.py       
99
95
94


Coding Excercise 37: Only Positive Numbers (E)

Define a function that takes as a parameter list that containing only the numbers that are greater than 0.  
For example, if I called your function with foo([-5, 3, -1, 101]) it should return [3, 101].

def foo(lst):
    return [i for i in lst if i > 0]

foo([-5, 3, -1, 101])

Ex 37. Again an alternative way to solve and output the values below:

def foo(lst):
    nums = []
    for i in lst: 
        if i > 0:
            nums.append(i)
            print(i)

foo([-5, 3, -1, 101])

Output:

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section9> py -3 .\listCompTest2.py
3
101

62. List Comprehension with If-Else Conditional - Output
PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section9> py -3 .\listComprehWithIfElse.py
[22.1, 23.4, 34.0, 0, 23.0]

Coding Excercise 38: Zero Instead (E)

Define a functions that takes as parameter a list that contains both numbers and strings and 
returns the same list but with zeros instead of strings.  For example, I called your function 
with foo([99, 'no data', 95, 94, 'no data']) it should return [99, 0, 95, 94, 0]

def foo(lst):
    return [i if not isinstance(i, str) else 0 for i in lst]

foo([99, 'no data', 95, 94, 'no data'])


Coding Excercise 39: Convert and Sum Up (E)

Define a functions that takes as parameter a list that contains decimal numbers as strings and 
returns the sum of those numbers.  For example, I called your function with foo(['1.2, '2.6', '3.3']) 
it should return 7.1.  Note that the floats of the input list are string datatypes.

def foo(lst):
    return sum([float(i) for i in lst])

foo(['1.2', '2.6', '3.3'])

and then sort working with output:

def foo(lst):
    nums = []
    for i in lst:     
        print(sum(float(i) for i in lst))
        print(type(i))
      
    return nums

foo(['1.2', '2.6', '3.3'])

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section9> py -3 .\listCompTest3.py
7.1
<class 'str'>
7.1
<class 'str'>
7.1
<class 'str'>


63. Summary: List Comprehensions
In this section you learned that:

A list comprehension is an expression that creates a list by iterating over another container.

A basic list comprehension:

[i*2 for i in [1, 5, 10]]
Output: [2, 10, 20]

List comprehension with if condition:

[i*2 for i in [1, -2, 10] if i>0]
Output: [2, 20]

List comprehension with an if and else condition:

[i*2 if i>0 else 0 for i in [1, -2, 10]]
Output: [2, 0, 20]


Section 10: More on Functions

Did You Know?
Python was the sixth most popular programming language in 2010 on 
StackOverflow (left image). It continually went up in the ranks to 
being the most popular among all in 2018 (right image).


Coding Excercise 40: Function with Multiple Parameters (E)

Implement a function that takes two strings as parameters, concatenates 
them, and returns the results.

def foo(a, b):
    return a + b
    
print(foo("Hello ", "World!"))


Coding Excercise 41: Average Function (E)

Define a function that takes an indefinite number of numbers as arguments and 
returns their average.  If I called your function with foo(10, 20, 30, 40) it 
should return the 25, the average of those numbers.

def foo(*args):
    return sum(args) / len(args)

print(int(foo(10, 20, 30, 40)))

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section10> py -3 .\averageFunctionEx41.py
25

Coding Excercise 42: Indefinite Number of Strings Processed (E)

Define a function that takes an indefinite number of strings as parameters and 
returns a list containing all the strings in UPPERCASE and sorted alphabetically.
For example, if I called your function with foo("snow", "glacier", "iceberg") it 
should return ['GLACIER', 'ICEBERG', 'SNOW'].

def foo(*args):
    args = [i.upper() for i in args]
    return  sorted(args)

print(foo("snow", "glacier", "iceberg"))

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section10> py -3 .\funcStringsArgs.py
['GLACIER', 'ICEBERG', 'SNOW']


Coding Excercise 43: Indefinite Number of Keyword Arguments (E)

Enter the correct parameters inside find_sum() so that the output of the code is 9.

def find_sum(**kwargs):
    return sum(kwargs.values())
    
print(find_sum())

Answer:

def find_sum(**kwargs):
    return sum(kwargs.values())
    
print(find_sum(a=4, b=5))


69. Summary: More on Functions
In this section you learned that:

Functions can have more than one parameter:

def volume(a, b, c):
    return a * b * c
Functions can have default parameters (e.g. coefficient):

def converter(feet, coefficient = 3.2808):
    meters = feet / coefficient
    return meters
 
print(converter(10))
Output: 3.0480370641306997

Arguments can be passed as non-keyword (positional) arguments (e.g. a) or keyword arguments (e.g. b=2 and c=10):

def volume(a, b, c):
    return a * b * c
 
print(volume(1, b=2, c=10))
An *args parameter allows the  function to be called with an arbitrary number of non-keyword arguments:

def find_max(*args):
    return max(args)
print(find_max(3, 99, 1001, 2, 8))
Output: 1001

An **kwargs parameter allows the function to be called with an arbitrary number of keyword arguments:

def find_winner(**kwargs):
    return max(kwargs, key = kwargs.get)
 
print(find_winner(Andy = 17, Marry = 19, Sim = 45, Kae = 34))
Output: Sim

Here's a summary of function elements:
* See summary_of_function_elements.jpg


Section 11: File Processing

71. Reading Text from a File:
myfile = open("fruits.txt")
print(myfile.read())

''' Output:
py -3 .\readTxtFile.py
pear
apple
orange
mandarin
watermelon
pomegranate
'''

Coding Excercise 44: Read Text from a File and Print (E)

Answer:
file = open("bear.txt")
print(file.read())


Coding Exercise 45: Reading and Processing Text (E)

Answer:
myfile = open("bear.txt")
content = myfile.read()

myfile.close()

print(content[:90])


Coding Exercise 46: File Processing inside a Function (E)

Answer: 
def foo(character, filepath="bear.txt"):
    myfile = open(filepath)
    content = myfile.read()
    return content.count(character)

print(foo("e"))

''' Output
py -3 .\fileProcessingInFunc.py
56
'''

76. Writing Text to a File

>>> help(open)
Help on built-in function open in module io:

open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
    Open file and return a stream.  Raise OSError upon failure.


Coding Exercise 47: Write Snail (E)

Answer:
with open("file.txt", "w") as myfile:
    myfile.write("snail")

Coding Exercise 48: Write First 90 (E)

Answer:
with open("bear.txt", "r") as file:
    content = file.read()

with open("first.txt", "w") as file:
    file.write(content[:90])


Coding Exercise 49: Read and Append (E)

Answer:
with open("bear1.txt", "r") as file:
    content = file.read()
    
with open("bear2.txt", "a+") as file:
    file.write(content)

Coding Exercise 50: Copy n-times (E)

Answer:
with open("data.txt", "a+") as file:
    file.seek(0)
    content = file.read()
    file.seek(0)
    file.write("\n"+content)
    file.write("\n"+content)


78. Summary: File Processing
In this section you learned that:

You can read an existing file with Python:

with open("file.txt") as file:
    content = file.read()
You can create a new file with Python and write some text on it:

with open("file.txt", "w") as file:
    content = file.write("Sample text")
You can append text to an existing file without overwriting it:

with open("file.txt", "a") as file:
    content = file.write("More sample text")
You can both append and read a file with:

with open("file.txt", "a+") as file:
    content = file.write("Even more sample text")
    file.seek(0)
    content = file.read()


Section 12: Imported Modules

79. Builtin Modules

>>> import sys
>>> sys.builtin_module_names
('_abc', '_ast', '_bisect', '_blake2', '_codecs', '_codecs_cn', '_codecs_hk', 
'_codecs_iso2022', '_codecs_jp', '_codecs_kr', '_codecs_tw', '_collections', 
'_contextvars', '_csv', '_datetime', '_functools', '_heapq', '_imp', '_io', 
'_json', '_locale', '_lsprof', '_md5', '_multibytecodec', '_opcode', '_operator', 
'_pickle', '_random', '_sha1', '_sha256', '_sha3', '_sha512', '_signal', '_sre', 
'_stat', '_statistics', '_string', '_struct', '_symtable', '_thread', '_tracemalloc', 
'_warnings', '_weakref', '_winapi', '_xxsubinterpreters', 'array', 'atexit', 
'audioop', 'binascii', 'builtins', 'cmath', 'errno', 'faulthandler', 'gc', 
'itertools', 'marshal', 'math', 'mmap', 'msvcrt', 'nt', 'parser', 'sys', 
'time', 'winreg', 'xxsubtype', 'zlib')
>>> dir(time)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'time' is not defined
>>> import time
>>> dir(time)
['_STRUCT_TM_ITEMS', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 
'altzone', 'asctime', 'ctime', 'daylight', 'get_clock_info', 'gmtime', 'localtime', 
'mktime', 'monotonic', 'monotonic_ns', 'perf_counter', 'perf_counter_ns', 'process_time', 
'process_time_ns', 'sleep', 'strftime', 'strptime', 'struct_time', 'thread_time', 
'thread_time_ns', 'time', 'time_ns', 'timezone', 'tzname']
>>> help(time.sleep)
Help on built-in function sleep in module time:

sleep(...)
    sleep(seconds)

    Delay execution for a given number of seconds.  The argument may be
    a floating point number for subsecond precision.

>>> time.sleep(3)

80. Standard Python Modules

>>> time.sleep(3)
>>> import os
>>> sys.prefix
'C:\\Users\\Rob\\AppData\\Local\\Programs\\Python\\Python38'

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section12> start C:\\Users\\Rob\\AppData\\Local\\Programs\\Python\\Python38
# Double Click into Lib\ and you will see all the .py Modules i.e. os.py

>>> dir(os)
['DirEntry', 'F_OK', 'MutableMapping', 'O_APPEND', 'O_BINARY', 'O_CREAT', 'O_EXCL', 'O_NOINHERIT', 
'O_RANDOM', 'O_RDONLY', 'O_RDWR', 'O_SEQUENTIAL', 'O_SHORT_LIVED', 'O_TEMPORARY', 'O_TEXT', 
'O_TRUNC', 'O_WRONLY', 'P_DETACH', 'P_NOWAIT', 'P_NOWAITO', 'P_OVERLAY', 'P_WAIT', 'PathLike', 'R_OK', 
'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'TMP_MAX', 'W_OK', 'X_OK', '_AddedDllDirectory', '_Environ', 
'__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', 
'__spec__', '_check_methods', '_execvpe', '_exists', '_exit', '_fspath', '_get_exports_list', '_putenv', 
'_unsetenv', '_wrap_close', 'abc', 'abort', 'access', 'add_dll_directory', 'altsep', 
'chdir', 'chmod', 'close', 'closerange', 'cpu_count', 'curdir', 'defpath', 'device_encoding', 'devnull', 
'dup', 'dup2', 'environ', 'error', 'execl', 'execle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 
'execvpe', 'extsep', 'fdopen', 'fsdecode', 'fsencode', 'fspath', 'fstat', 'fsync', 'ftruncate', 
'get_exec_path', 'get_handle_inheritable', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 
'getenv', 'getlogin', 'getpid', 'getppid', 'isatty', 'kill', 'linesep', 'link', 'listdir', 'lseek', 
'lstat', 'makedirs', 'mkdir', 'name', 'open', 'pardir', 'path', 'pathsep', 'pipe', 'popen', 'putenv', 
'read', 'readlink', 'remove', 'removedirs', 'rename', 'renames', 'replace', 'rmdir', 'scandir', 'sep', 
'set_handle_inheritable', 'set_inheritable', 'spawnl', 'spawnle', 'spawnv', 'spawnve', 'st', 'startfile', 
'stat', 'stat_result', 'statvfs_result', 'strerror', 'supports_bytes_environ', 'supports_dir_fd', 
'supports_effective_ids', 'supports_fd', 'supports_follow_symlinks', 'symlink', 'sys', 'system', 
'terminal_size', 'times', 'times_result', 'truncate', 'umask', 'uname_result', 'unlink', 'urandom', 'utime', 
'waitpid', 'walk', 'write']

81. Third-Party Modules

PS C:\Users\Rob\AppData\Local\Programs\Python\Python38\Scripts> .\pip3.8.exe install pandas       
Collecting pandas
  Downloading https://files.pythonhosted.org/packages/68/db/4a6f569775c1dd762d3cbb0505ba0cd93a96db5f34e9fc761ff2a76daefa/pandas-1.0.1-cp38-cp38-win_amd64.whl (9.2MB)
     |████████████████████████████████| 9.2MB 1.6MB/s 
Collecting python-dateutil>=2.6.1 (from pandas)
  Downloading https://files.pythonhosted.org/packages/d4/70/d60450c3dd48ef87586924207ae8907090de0b306af2bce5d134d78615cb/python_dateutil-2.8.1-py2.py3-none-any.whl (227kB)
     |████████████████████████████████| 235kB 1.1MB/s 
Collecting numpy>=1.13.3 (from pandas)
  Downloading https://files.pythonhosted.org/packages/95/47/ea0ae5a778aae07ede486f3dc7cd4b788dc53e11b01a17251b020f76a01d/numpy-1.18.1-cp38-cp38-win_amd64.whl (12.8MB)
     |████████████████████████████████| 12.8MB 1.3MB/s 
Collecting pytz>=2017.2 (from pandas)
  Downloading https://files.pythonhosted.org/packages/e7/f9/f0b53f88060247251bf481fa6ea62cd0d25bf1b11a87888e53ce5b7c8ad2/pytz-2019.3-py2.py3-none-any.whl (509kB)
     |████████████████████████████████| 512kB 1.6MB/s 
Collecting six>=1.5 (from python-dateutil>=2.6.1->pandas)
  Downloading https://files.pythonhosted.org/packages/65/eb/1f97cb97bfc2390a276969c6fae16075da282f5058082d4cb10c6c5c1dba/six-1.14.0-py2.py3-none-any.whl
Installing collected packages: six, python-dateutil, numpy, pytz, pandas
  WARNING: The script f2py.exe is installed in 'c:\users\rob\appdata\local\programs\python\python38\Scripts' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
Successfully installed numpy-1.18.1 pandas-1.0.1 python-dateutil-2.8.1 pytz-2019.3 six-1.14.0     
WARNING: You are using pip version 19.2.3, however version 20.0.2 is available.
You should consider upgrading via the 'python -m pip install --upgrade pip' command.
PS C:\Users\Rob\AppData\Local\Programs\Python\Python38\Scripts> ls C:\Users\Rob\AppData\Local\Programs\Python\Python38\Lib\site-packages\pandas


    Directory: C:\Users\Rob\AppData\Local\Programs\Python\Python38\Lib\site-packages\pandas       


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----       08/03/2020     20:23                api
d-----       08/03/2020     20:23                arrays
d-----       08/03/2020     20:23                compat
d-----       08/03/2020     20:23                core
d-----       08/03/2020     20:23                errors
d-----       08/03/2020     20:23                io
d-----       08/03/2020     20:23                plotting
d-----       08/03/2020     20:23                tests
d-----       08/03/2020     20:23                tseries
d-----       08/03/2020     20:23                util
d-----       08/03/2020     20:23                _config
d-----       08/03/2020     20:23                _libs
d-----       08/03/2020     20:23                __pycache__
-a----       08/03/2020     20:22          22364 conftest.py
-a----       08/03/2020     20:22            312 testing.py
-a----       08/03/2020     20:22          83705 _testing.py
-a----       08/03/2020     20:22           2569 _typing.py
-a----       08/03/2020     20:22            568 _version.py
-a----       08/03/2020     20:22          10644 __init__.py

cd 'C:\Users\Rob\Desktop\AWS EC2\python-mega\'

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section12> py -3 .\third-PartyModules.py
20.55
20.55
22.125

83: Summary: Imported Modules

In this section you learned that:

Builtin objects are all objects that are written inside the Python interpreter in C language.

Builtin modules contain builtins objects.

Some builtin objects are not immediately available in the global namespace. They are parts of a builtin module. To use those objects the module needs to be imported first. E.g.:

import time
time.sleep(5)
A list of all builtin modules can be printed out with:

import sys
sys.builtin_module_names
Standard libraries is a jargon that includes both builtin modules written in C and also modules written in Python.

Standard libraries written in Python reside in the Python installation directory as .py files. You can find their directory path with sys.prefix.

Packages are a collection of .py modules.

Third-party libraries are packages or modules written by third-party persons (not the Python core development team).

Third-party libraries can be installed from the terminal/command line:

Windows:

pip install pandas

Mac and Linux:

pip3 install pandas

My Windows:

pip3.8.exe install pandas

FYI
>>> import sys
>>> sys.prefix
'C:\\Users\\Rob\\AppData\\Local\\Programs\\Python\\Python38'


Section 13: Application 1: Build an Interactive English Dictionary


87. Loading JSON Data

>>> import json
>>> help(json.load)
Help on function load in module json:

load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, 
parse_constant=None, object_pairs_hook=None, **kw)
    Deserialize ``fp`` (a ``.read()``-supporting file-like object containing
    a JSON document) to a Python object.

    ``object_hook`` is an optional function that will be called with the
    result of any object literal decode (a ``dict``). The return value of
    ``object_hook`` will be used instead of the ``dict``. This feature
    can be used to implement custom decoders (e.g. JSON-RPC class hinting).

    ``object_pairs_hook`` is an optional function that will be called with the
    result of any object literal decoded with an ordered list of pairs.  The
    return value of ``object_pairs_hook`` will be used instead of the ``dict``.
    This feature can be used to implement custom decoders.  If ``object_hook``
    is also defined, the ``object_pairs_hook`` takes priority.

    To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``
    kwarg; otherwise ``JSONDecoder`` is used.

>>> import json
>>> d = open("data.json")
>>> data = json.load(d)
>>> print(type(data))
<class 'dict'>
>>> print(data)
 doing something for customers, but that do not produce goods.'], 'test': 
 ['To carry out an examination on (a substance, material, or system) by applying 
 some chemical or physical procedure designed to indicate tTraceback 
 (most recent call last):
  File "<stdin>", line 1, in <module>
KeyboardInterrupt etc, etc, etc...
>>> data["rain"]
['Precipitation in the form of liquid water drops with diameters greater than 0.5 millimetres.', 
'To fall from the clouds in drops of water.']

88. Returning the Definition of a Word

py -3 .\app1.py
Enter a word: dog
['A common four-legged animal, especially kept by people as a pet or to hunt or guard things.', 
'A dull, unattractive girl or woman.', 'An iron for holding wood in a fireplace.']

91. Similarity Ratio Between Two Words

# List of Standard Libraries you can import into Python via:
https://docs.python.org/3/library/index.html

>>> import difflib
>>> from difflib import SequenceMatcher
>>> SequenceMatcher(None, "rainn", "rain")
<difflib.SequenceMatcher object at 0x000001C9247B2C40>
>>> SequenceMatcher(None, "rainn", "rain").ratio()
0.8888888888888888

92. Best Matches out of a List of Words

>>> from difflib import get_close_matches
>>> help(get_close_matches)
Help on function get_close_matches in module difflib:

get_close_matches(word, possibilities, n=3, cutoff=0.6)
    Use SequenceMatcher to return list of the best "good enough" matches.
    
    word is a sequence for which close matches are desired (typically a
    string).

    possibilities is a list of sequences against which to match word
    (typically a list of strings).

    Optional arg n (default 3) is the maximum number of close matches to
    return.  n must be > 0.

    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities
    that don't score at least that similar to word are ignored.

    The best (no more than n) matches among the possibilities are returned
    in a list, sorted by similarity score, most similar first.

    >>> get_close_matches("appel", ["ape", "apple", "peach", "puppy"])
    ['apple', 'ape']
    >>> import keyword as _keyword
    >>> get_close_matches("wheel", _keyword.kwlist)
    ['while']
    >>> get_close_matches("Apple", _keyword.kwlist)
    []
    >>> get_close_matches("accept", _keyword.kwlist)
    ['except']

>>> get_close_matches("rainn", ["help", "pyramid", "rain"])
['rain']

>>> data.keys()  # will output all of the dict keys from File Object

>>> get_close_matches("rainn", data.keys())
['rain', 'train', 'rainy']
>>> get_close_matches("rainn", data.keys(), n=5) 
['rain', 'train', 'rainy', 'grain', 'drain']
>>> get_close_matches("rainn", data.keys())[0]   
'rain'

93. Recommending the Best Match

>>> get_close_matches("ccccccccccccc", data.keys(), cutoff=0.8)
[]
>>> get_close_matches("cacacaa", data.keys(), cutoff=0.5)
['acacia', 'Sciacca', 'cacao']
>>> get_close_matches("cacacaa", data.keys(), cutoff=0.8)
[]

94. Confirmation from the User

Enter a word: trop
Did you mean trope instead? Enter Y if yes, or N if no: y
['A rhetorical figure of speech in which a word or phrase is used 
other than in a literal manner.']

Enter a word: trop
Did you mean trope instead? Enter Y if yes, or N if no: Y
['A rhetorical figure of speech in which a word or phrase is used 
other than in a literal manner.']

Enter a word: trop
Did you mean trope instead? Enter Y if yes, or N if no: N
The word doesn't exist!  Please double check it...

Enter a word: trop
Did you mean trope instead? Enter Y if yes, or N if no: n
The word doesn't exist!  Please double check it...

Enter a word: oqwiueoiweuiowjkldns
The word doesn't exist!  Please double check it...


Section 14: Project Exercise with Python and MySQL: Interactive English Dictionary

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section14> cd C:\Users\Rob\AppData\Local\Programs\Python\Python38\Scripts\
PS C:\Users\Rob\AppData\Local\Programs\Python\Python38\Scripts> .\pip3.8.exe install mysql-connector-python
Collecting mysql-connector-python
  Downloading https://files.pythonhosted.org/packages/5c/1e/3f372b31853b868153e453146d99ca787da3eb4bf0b654590b829b262afa/mysql_connector_python-8.0.19-py2.py3-none-any.whl (355kB)
     |████████████████████████████████| 358kB 1.6MB/s 
Collecting dnspython==1.16.0 (from mysql-connector-python)
  Downloading https://files.pythonhosted.org/packages/ec/d3/3aa0e7213ef72b8585747aa0e271a9523e713813b9a20177ebe1e939deb0/dnspython-1.16.0-py2.py3-none-any.whl (188kB)
     |████████████████████████████████| 194kB 2.2MB/s 
Collecting protobuf==3.6.1 (from mysql-connector-python)
  Downloading https://files.pythonhosted.org/packages/77/78/a7f1ce761e2c738e209857175cd4f90a8562d1bde32868a8cd5290d58926/protobuf-3.6.1-py2.py3-none-any.whl (390kB)
     |████████████████████████████████| 399kB 2.2MB/s 
Requirement already satisfied: setuptools in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from protobuf==3.6.1->mysql-connector-python) (41.2.0)
Requirement already satisfied: six>=1.9 in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from protobuf==3.6.1->mysql-connector-python) (1.14.0)
Installing collected packages: dnspython, protobuf, mysql-connector-python
Successfully installed dnspython-1.16.0 mysql-connector-python-8.0.19 protobuf-3.6.1
WARNING: You are using pip version 19.2.3, however version 20.0.2 is available.
You should consider upgrading via the 'python -m pip install --upgrade pip' command.

cd 'C:\Users\Rob\Desktop\AWS EC2\python-mega\Section14'

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section14> py -3 .\exercise.py
Term used in GIS technologies in the vector type of internal data organization: spatial data are divided into point, line and polygon types.
The descendants of one individual.
A succession of notes forming a distinctive sequence.
A measure of length equal to one twelfth of an inch.
An infinitely long, infinitely thin, not bent line in geometry.
A mark that is long relative to its width.
PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section14> py -3 .\exercise.py
[]
No results found!
PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section14> py -3 .\exercise.py
Enter a Word: dog
A common four-legged animal, especially kept by people as a pet or to hunt or guard things.       
A dull, unattractive girl or woman.
An iron for holding wood in a fireplace.
PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section14> py -3 .\exercise.py
Enter a Word: donkey
A domesticated animal, Equus asinus.
PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section14> py -3 .\exercise.py
Enter a Word: Donkey
A domesticated animal, Equus asinus.
PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section14> py -3 .\exercise.py
Enter a Word: USA
A country and federal republic in North America located north of Mexico and south of Canada, including Alaska, Hawaii and overseas territories.


102. More SQL Statements

SELECT * FROM Dictionary WHERE length(Expression) < 2

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section14> py -3 .\exercise.py
('I', 'The speaker or writer referring to himself or herself alone.')
('I', 'The capitalized version of the ninth letter of the Latin alphabet.')
('a', 'One; any indefinite example of [indefinite article].')
('a', 'One certain or particular.')
('a', 'To; each; per.')
('a', 'Singular feminine of the indefinite article')
('a', 'The masculine singular indefinite article.')
('a', 'A certain; a particular.')
('a', 'Some; about')
('a', 'A work by.')
('a', '[The indefinite article, used in a negative construction.]')
('C', 'A musical note.')
('C', 'A general-purpose computer programming language developed in 1972 by Dennis Ritchie at the 
Bell Telephone Laboratories for use with the Unix operating system.')
('E', 'A spoken language in China')
('E', 'A chemically modified amphetamine that has hallucinogenic as well as stimulant properties.')
('E', 'Musical note between D and F.')
('B', 'The musical note between A and C.')
('U', 'ISO 639-6 entity')
('O', 'ISO 639-6 entity')
('O', 'Abbreviation of octavo, a book size.')
('F', 'Music note between mi and sol.')
('F', 'The abbreviation for folio, a book size.')
('F', 'The abbreviation for folio, a book size.')
('A', 'A musical note between G and B.')
('D', 'Musical note between C and E.')
('D', 'In snooker billards, the area on the table where the white cue ball has its frame-initial position.')
('G', 'Musical note between F and A.')
('V', 'Cranial nerve responsible for sensation in the face.')
('J', 'A cigarette rolled using cannabis.')
('L', 'A cigarette rolled using cannabis.')
('X', 'A chemically modified amphetamine that has hallucinogenic as well as stimulant properties.')
('Q', 'Abbreviation of quarto, a book size .')

py -3 .\exercise.py
Enter a Word: rugby
A sport originally from Rugby, England where players in a team
of 15 attempt to score points by touching an ovid ball to the 
ground in the area past their opponent’s territory or kicking 
the ball between goalposts and over a crossbar.


## Section 15: Data Analysis with Pandas

In computer programming, pandas is a software library written for 
the Python programming language for data manipulation and analysis. 
In particular, it offers data structures and operations for manipulating 
numerical tables and time series. It is free software released under 
the three-clause BSD license.

cd C:\Users\Rob\AppData\Local\Programs\Python\Python38\Scripts\
.\pip3.8.exe install pandas
cd 'C:\Users\Rob\Desktop\AWS EC2\python-mega'

# or just use:
pip3.8 install pandas

# then
pip3.8 install ipython


105. Getting Started with Pandas

# from a CMD Prompt run:
C:\Users\Rob\Desktop\AWS EC2\python-mega\Section15>ipython
Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.13.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import pandas

In [2]: df1=pandas.DataFrame([[2,4,6],[10,20,30]])

In [3]: df1
Out[3]:
    0   1   2
0   2   4   6
1  10  20  30

In [4]: df1=pandas.DataFrame([[2,4,6],[10,20,30]],columns=["Price","Age","Value"])

In [5]: df1
Out[5]:
   Price  Age  Value
0      2    4      6
1     10   20     30

In [6]: df1=pandas.DataFrame([[2,4,6],[10,20,30]],columns=["Price","Age","Value"],index=["First","Second"])

In [7]: df1
Out[7]:
        Price  Age  Value
First       2    4      6
Second     10   20     30

In [8]: df2=pandas.DataFrame([{"Name":"John"},{"Name":"Jack"}])

In [9]: df2
Out[9]:
   Name
0  John
1  Jack

In [10]: df2=pandas.DataFrame([{"Name":"Jack","Surname":"Robinson"},{"Name":"John"}])

In [11]: df2
Out[11]:
   Name   Surname
0  Jack  Robinson
1  John       NaN

In [19]: type(df1)
Out[19]: pandas.core.frame.DataFrame

In [22]: df1.mean()
Out[22]:
Price     6.0
Age      12.0
Value    18.0
dtype: float64

In [23]: df1.mean().mean()
Out[23]: 12.0

In [24]: type(df1.mean())
Out[24]: pandas.core.series.Series

In [25]: df1.Price
Out[25]:
First      2
Second    10
Name: Price, dtype: int64

In [26]: type(df1.Price)
Out[26]: pandas.core.series.Series

In [27]: df1.Price.mean()
Out[27]: 6.0

In [28]: df1.Price.max()
Out[28]: 10


106. Getting Started with Jupyter Notebooks

# from a CMD Prompt run:
pip3.8 install jupyter

110. Note on Loading Excel Files

# from a CMD Prompt run:
pip3.8 install xlrd   
Collecting xlrd   
  Downloading https://files.pythonhosted.org/packages/b0/16/63576a1a001752e34bf8ea62e367997530dc553b689356b9879339cf45a4/xlrd-1.2.0-py2.py3-none-any.whl (103kB)
     |████████████████████████████████| 112kB 1.6MB/s 
Installing collected packages: xlrd
Successfully installed xlrd-1.2.0

112. Loading TXT Files

# When using Jupyter and outputing a file with semi colons use sep=',' i.e.
df5=pandas.read_csv("supermarkets-semi-colons.txt", sep=';')
df5

116. Indexing and Slicing

# Two ways to do this
Label based Indexing     - Column Labels
Position based Indexing  - Index Labels

df7.loc["735 Dolores St":"332 Hill St","ID":"Employees"]


List of Commands used in this Section:

import os
os.listdir()
import pandas
df1=pandas.read_csv("supermarkets.csv")
df1
df2=pandas.read_json("supermarkets.json")
df2
df2.set_index("ID")
df3=pandas.read_excel("supermarkets.xlsx", sheet_name=0)
df3
df4=pandas.read_csv("supermarkets-commas.txt")
df4
df5=pandas.read_csv("supermarkets-semi-colons.txt", sep=';')
df5
df8=pandas.read_csv("data.txt", header = None)
df8
df8.columns = ["ID", "Address", "City", "ZIP", "Country", "Name", "Employees"]
df8
df8.set_index("ID")
df8
df9 = df8.set_index("ID")
df9
df8.set_index("ID", inplace=True)
df8
df8.set_index("Address", inplace=True)
df8
df8.set_index("Name", inplace=True, drop=False)
df8
df7=pandas.read_json("supermarkets.json")
df7
df7=df7.set_index("Address")
df7
df7.loc["735 Dolores St":"332 Hill St","ID":"Employees"]
list(df7.loc[:,"Name"])
df7
df7.iloc[3,1:4]
df7
df7.drop("City",1)
df7.drop(df7.columns[0:3],1)
df7.columns
df7
len(df7.index)
Out[13]: 6 # output
df7["Continent"]=df7.shape[0]*["North America"]
df7
df7.shape
Out[17]: (6, 8) # output
df7["Continent"]=df7["Country"]+ ", " + "North America"
df7
df7_t=df7.T
df7
df7_t["My Address"]=[7,"10 Deki St","Suva","ND","Fiji","Rob Q",120,"Asia Pacific"]
df7_t
df7=df7_t.T
df7

119. Note on Nominatim
We are going to use Nominatim() in the next video. Nominatim() currently has 
a bug.  To fix this problem, whenever you see these lines in the next video:

        from geopy.geocoders import Nominatim
        nom = Nominatim()

change them to these

        from geopy.geocoders import ArcGIS
        nom = ArcGIS()

The rest of the code remains the same.

120. Example: Geocoding Addresses with Pandas and Geopy

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section15> pip3.8 install geopy
Collecting geopy  
  Downloading https://files.pythonhosted.org/packages/53/fc/3d1b47e8e82ea12c25203929efb1b964918a77067a874b2c7631e2ec35ec/geopy-1.21.0-py2.py3-none-any.whl (104kB)
     |████████████████████████████████| 112kB 2.2MB/s 
Collecting geographiclib<2,>=1.49 (from geopy)
  Downloading https://files.pythonhosted.org/packages/8b/62/26ec95a98ba64299163199e95ad1b0e34ad3f4e176e221c40245f211e425/geographiclib-1.50-py3-none-any.whl
Installing collected packages: geographiclib, geopy
Successfully installed geographiclib-1.50 geopy-1.21.0

Commands for the last Exercise120.:

import geopy
dir(geopy)
from geopy.geocoders import ArcGIS
nom = ArcGIS()
nope=nom.geocode("735 Dolores St, San Francisco, CA 94119")
print(nope)
nom.geocode("3995 23rd St, San Francisco, CA 941114")
y=nom.geocode("3995 23rd St, San Francisco, CA 941114")
y.latitude
y.longitude
type(y)
df=pandas.read_csv("supermarkets.csv")
df
df["Address"]=df["Address"]+", "+df["City"]+", "+df["State"]+", "+df["Country"]
df
df["Coordinates"]=df["Address"].apply(nom.geocode)
df
df.Coordinates[0]
df.Coordinates[0].latitude
df["Latitude"]=df["Coordinates"].apply(lambda x: x.latitude if x != None else None)
df["Longitude"]=df["Coordinates"].apply(lambda x: x.longitude if x != None else None)
df


Section 16: Numpy

121. What is Numpy
# NumPy is a general-purpose array-processing package. It provides a high-performance
# multidimensional array object, and tools for working with these arrays. It is the
# fundamental package for scientific computing with Python

# Install Numpy with pip
PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section16> pip3.8 install numpy
Requirement already satisfied: numpy in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (1.18.1)


112. Installing OpenCV
In the next lecture and in Section 17 we will use the OpenCV image processing library. Let us first make sure you have installed the OpenCV library. OpenCV is also referred to as cv2 in Python.

Install OpenCV:
1. Open the command line and type:
pip install opencv-python

PS C:\Users\fcukq\Desktop\python-mega\Section14> pip3.8 install opencv-python
Collecting opencv-python
  Downloading https://files.pythonhosted.org/packages/e6/d6/516883f8d2f255c41d8c560ef70c91085f2ceac7b70b7afe41432bd8adbb/opencv_python-4.2.0.34-cp38-cp38-win32.whl (24.2MB)
     |████████████████████████████████| 24.2MB 3.3MB/s 
Requirement already satisfied: numpy>=1.17.3 in c:\users\fcukq\appdata\local\programs\python\python38-32\lib\site-packages (from opencv-python) (1.18.2)
Installing collected packages: opencv-python
Successfully installed opencv-python-4.2.0.34

2. Open a Python session and try:
import cv2 

3. If you get no errors, you installed OpenCV successfully. If you get an error, see the FAQs below:

FAQs
1. My OpenCV installation didn't work on Windows
Solution:

- 1. Uninstall OpenCV with:
pip uninstall opencv-python

- 2. Download a wheel (.whl) file from this link and install the file with pip. Make sure you download the 
correct file for your Windows and your Python versions. For example, for Python 3.6 on Windows 64-bit you 
would do this:
pip install opencv_python‑3.2.0‑cp36‑cp36m‑win_amd64.whl 

- 3. Try to import cv2 in Python again. If there's still an error, type the following again in the command line:
pip install opencv-python 

- 4. Try importing cv2 again. It should work at this point.

2. My OpenCV installation didn't work on Mac

Solution:
If pip install opencv-python didn't work, install OpenCV for Python 2 and use Python 2 to run the programs 
that contains cv2 code. Because Python 2 is installed by default on Mac, you don't need to install Python 2.

Here are the steps to correctly install OpenCV:

- 1. Install brew.
To install brew, open your terminal and execute the following:
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

- 2. OpenCV depends on GTK+, so install that dependency first with brew (always from the terminal):
brew install gtk+ 

- 3. Install OpenCV with brew:
brew install opencv 

- 4. Open Python 2 by typing:
python 

- 5. Import cv2 in Python:
import cv2 

If you get no errors, you installed OpenCV successfully.

3. My OpenCV installation didn't work on Linux

- 1. Open your terminal and execute the following commands one by one:
sudo apt-get install libqt4-dev
cmake -D WITH_QT=ON ..
make
sudo make install

- 2. 2. If the above commands don't work, execute this:
sudo apt-get install libopencv-*

- 3. Then, install OpenCV with pip:
pip install opencv-python 

4. Import cv2 in Python. If you get no errors, you installed OpenCV successfully.

Commands:

import cv2
im_g=cv2.imread("smallgrey.png",0)
im_g
im_g1=cv2.imread("smallgrey.png",1)
im_g1
cv2.imwrite("newsmallgrey.png",im_g)
# output True

125. Stacking and Splitting Numpy Arrays

ims=numpy.hstack((im_g,im_g))  # hstack() horizontal stack method which only takes one parameter
                               # stick both parameters in two (()) which makes it a Tuple

ims=numpy.vstack((im_g,im_g,im_g)) # obvi vertical stack method

lst=numpy.hsplit(ims,5)
print(lst)

lst2=numpy.vsplit(ims,3)
print(lst2)


Section 17. Application 2: Create Webmaps with Python and Folium

126. Web Map - How the Output will look like

Basemap layer - Names on the back
Polygon layer - Representing the population of the countries
Point layer - These are represented by Dots in this example

# layers can be de-activated.

127. The Basemap

# Install Folium

C:\Users\Rob\Desktop\AWS EC2\python-mega\Section17>pip3.8 install folium
Collecting folium
  Downloading https://files.pythonhosted.org/packages/fd/a0/ccb3094026649cda4acd55bf2c3822bb8c277eb11446d13d384e5be35257/folium-0.10.1-py2.py3-none-any.whl (91kB)
     |████████████████████████████████| 92kB 1.5MB/s
Collecting branca>=0.3.0 (from folium)
  Downloading https://files.pythonhosted.org/packages/81/6d/31c83485189a2521a75b4130f1fee5364f772a0375f81afff619004e5237/branca-0.4.0-py3-none-any.whl
Requirement already satisfied: jinja2>=2.9 in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from folium) (2.11.1)
Collecting requests (from folium)
  Downloading https://files.pythonhosted.org/packages/1a/70/1935c770cb3be6e3a8b78ced23d7e0f3b187f5cbfab4749523ed65d7c9b1/requests-2.23.0-py2.py3-none-any.whl (58kB)
     |████████████████████████████████| 61kB 3.8MB/s
Requirement already satisfied: numpy in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from folium) (1.18.1)
Requirement already satisfied: six in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from branca>=0.3.0->folium) (1.14.0)
Requirement already satisfied: MarkupSafe>=0.23 in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from jinja2>=2.9->folium) (1.1.1)
Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 (from requests->folium)
  Downloading https://files.pythonhosted.org/packages/e1/e5/df302e8017440f111c11cc41a6b432838672f5a70aa29227bf58149dc72f/urllib3-1.25.9-py2.py3-none-any.whl (126kB)
     |████████████████████████████████| 133kB 3.3MB/s
Collecting idna<3,>=2.5 (from requests->folium)
  Downloading https://files.pythonhosted.org/packages/89/e3/afebe61c546d18fb1709a61bee788254b40e736cff7271c7de5de2dc4128/idna-2.9-py2.py3-none-any.whl (58kB)
     |████████████████████████████████| 61kB 1.9MB/s
Collecting certifi>=2017.4.17 (from requests->folium)
  Downloading https://files.pythonhosted.org/packages/57/2b/26e37a4b034800c960a00c4e1b3d9ca5d7014e983e6e729e33ea2f36426c/certifi-2020.4.5.1-py2.py3-none-any.whl (157kB)
     |████████████████████████████████| 163kB 3.2MB/s
Collecting chardet<4,>=3.0.2 (from requests->folium)
  Downloading https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl (133kB)
     |████████████████████████████████| 143kB 2.2MB/s
Installing collected packages: branca, urllib3, idna, certifi, chardet, requests, folium
Successfully installed branca-0.4.0 certifi-2020.4.5.1 chardet-3.0.4 folium-0.10.1 idna-2.9 requests-2.23.0 urllib3-1.25.9

# This wasn't required but you may need install jinja2 - $ pip3.8 install jinja2

C:\Users\Rob\Desktop\AWS EC2\python-mega>py
Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import folium
>>> dir(folium)      
['Choropleth', 'Circle', 'CircleMarker', 'ClickForMarker', 'ColorLine', 'ColorMap', 'CssLink', 'CustomIcon', 'Div', 'DivIcon', 'Element', 'FeatureGroup', 'Figure', 'FitBounds', 'GeoJson', 'GeoJsonTooltip', 'Html', 'IFrame', 'Icon', 'JavascriptLink', 'LatLngPopup', 'LayerControl', 'LinearColormap', 'Link', 'MacroElement', 'Map', 'Marker', 'PolyLine', 'Polygon', 'Popup', 'Rectangle', 'RegularPolygonMarker', 'StepColormap', 'TileLayer', 
'Tooltip', 'TopoJson', 'Vega', 'VegaLite', 'WmsTileLayer', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '_version', 'branca', 'features', 'folium', 'map', 'raster_layers', 'sys', 'utilities', 'vector_layers']
>>> help(folium.map)

>>> map = folium.Map(location=[80, -100])
>>> map.save("Map1.html")
>>> map = folium.Map(location=[53.977048, -1.559376])
>>> map.save("Map2.html") 
>>> map = folium.Map(location=[53.977048, -1.559376], zoom_start=6)
>>> map.save("Map2.html")
>>> map = folium.Map(location=[53.977048, -1.559376], zoom_start=20)
>>> map.save("Map2.html")


128. Note

Note
In the next lecture I use this in the code:

tiles = "Mapbox Bright"

Please use this instead:

tiles = "Stamen Terrain"

Mapbox Bright and Stament Terrain are both types of basemaps, 
but Mapbox Bright doesn't work anymore. Stamen Terrain works great 
and you will see it creates a beautiful relief map.


133. HTML on Popups

Note that if you want to have stylized text (bold, different 
fonts, etc) in the popup window you can use HTML. Here's an example:

See htmlonpopups-exercise1.py

You can even put links in the popup window. For example, the 
code below will produce a popup window with the name of the 
volcano as a link which does a Google search for that particular 
volcano when clicked:

See htmlonpopups-exercise2.py


135. Add and Style Points (Practice)

Coding Exercise

Replace the icon markers we added in the previous lectures 
with circle markers shown in the screenshot below.

# There's a tip in the next lecture.


136. Tip: Add and Style Points

Exercise Tip

You can use dir(folium)  to look for possible methods of 
creating circle markers. Among the methods you will see 
Marker, which we previously used. 

Once you locate the method consider using the 'help'  
function to look for possible arguments you can pass to 
the method for styling the circle markers.


Quiz 4: Errors
# 4 questions

Done with Examples / Output and Reasons why and what Errors

145. Good Programming questions

# Example
Hi
I run the following code and expected to get the division in the
last print statement but got an error.

Here is my code:
{
    a = 1
    b = "2"
    c = 3
    print(int(2.5))
    print(c/0)
}

And here is the Error:
{
    2
    Traceback (most recent call last):
    File "errors3.py", line 5, in <module>
    print(c/0)
    ZeroDivisionError: division by zero
}

Please could someone help?

Quackers x


## Section 19: Aplication 3: Build a Website Blocker

148. Application Architecture

Mac & Linux: /etc/hosts
Windows: C:\Windows\System32\drivers\etc\hosts

# The date & time now using the datetime module
>>> from datetime import datetime as dt
>>> dt.now()
datetime.datetime(2020, 5, 16, 20, 49, 48, 564639)
(Year, Month, Day, Hour, Minutes, Seconds, Microseconds)
>>> type(dt.now())
<class 'datetime.datetime'>


153. The any() function

Hi! In case you didn't understand the if not any
(website in line for website in website_list) 
part in the previous video, here is another example:
{
    >>> lines  = ["trees are good", "pool is fresh", "face is round"]
    >>> website_list = ["face", "clock", "trend"]
    >>> for line in lines:
    ...     any(website in line for website in website_list)
    ... 
    False
    False
    True
}

We start iterating over the items of website_list using a for loop.
In the first iteration we would have:

any(website in "trees are good" for website in website_list)

Inside the parenthesis of any() there's another loop that iterates over website_list:
{
    ("face" in "trees are good")
    ("clock" in "trees are good")
    ("trend" in "trees are good")
}

If any of the above is True you get the expression evaluated to True. 
In this case none of them is True, so you get False.

If you want to return True (if all of them are True), use all() instead of any().

So, the part any(website in line for website in website_list) will either be equal 
to True or False.


156. Scheduling a Python Program on a Server

Scheduling a Python program on a 24/7 server

Keeping your computer on 24-7 is not practical, so if you want to execute a Python script
 at a particular time every day, you probably need a computer that is on all the time.

PythonAnywhere gives you access to such a 24-7 computer. You can upload a Python script and 
schedule it to run at a certain time every day. This availability can be useful, for example, 
when you want to extract some values (e.g., weather data) from a website and generate a text 
file with the value or other reports every day.

To schedule a Python script for execution on PythonAnywhere, follow these simple steps:

Sign up for a free account at https://www.pythonanywhere.com.

Go to your Dashboard, Files, Upload a File, and upload the Python file you want to schedule for execution.

Go to Tasks and set the time of the day you want your script to be executed and type in the 
name of the Python file you  uploaded (e.g., myscript.py). Note that the time you enter should be in UTC.

Click the Create button and you’re done.

Your Python file will now be executed every day at your specified time. If you don't have a Python 
script and you’re still confused about the benefit of this, here is a very simple Python script that 
you can  use to try the above steps:

If you don’t have a Python script and you’re still confused about the benefits of this PythonAnywhere 
feature, here is a very simple Python script you can use to schedule for execution:

from datetime import datetime
with open(datetime.now().strftime("%Y-%m-%d-%H-%M-%S"), "w") as myfile:
myfile.write("Hi there!")
The above code creates a text file and writes the string “Hi there!”  in that text file. The name of 
the text file will be the current date and time. For example one file name example would be 
2018-02-16-18-20-33.txt.

That name is generated by datetime.now() indicating the date and time the script was executed.  
Every time the script is executed, the script generates a new text file with a different name. 
You will have a new text file created every day.


## Section 20: Application 4: Build a Personal Website with Python and Flask

158. Your First Website

# Install Flask
C:\Users\Rob\Desktop\AWS EC2\python-mega\Section20>pip3.8 install flask
Collecting flask
  Downloading Flask-1.1.2-py2.py3-none-any.whl (94 kB)
     |████████████████████████████████| 94 kB 898 kB/s
Requirement already satisfied: Jinja2>=2.10.1 in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from flask) (2.11.1)
Collecting click>=5.1
  Downloading click-7.1.2-py2.py3-none-any.whl (82 kB)
     |████████████████████████████████| 82 kB 437 kB/s
Collecting itsdangerous>=0.24
  Downloading itsdangerous-1.1.0-py2.py3-none-any.whl (16 kB)
Collecting Werkzeug>=0.15
  Downloading Werkzeug-1.0.1-py2.py3-none-any.whl (298 kB)
     |████████████████████████████████| 298 kB 2.2 MB/s
Requirement already satisfied: MarkupSafe>=0.23 in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from Jinja2>=2.10.1->flask) (1.1.1)
Could not build wheels for Jinja2, since package 'wheel' is not installed.
Could not build wheels for MarkupSafe, since package 'wheel' is not installed.
Installing collected packages: click, itsdangerous, Werkzeug, flask
Successfully installed Werkzeug-1.0.1 click-7.1.2 flask-1.1.2 itsdangerous-1.1.0

https://pypi.org/project/Flask/


161. Note on Browser Caching

In the next lecture we will add CSS styling to the webpage. Sometimes, when you make a change 
to the CSS file and reload the webpage, the changes are not shown because the browser uses the 
previous cached styling. If this happens, open the browser in private (incognito) mode and load 
the webpage there.

163. Creating a Python Virtual Environment

# Install virtualenv
C:\Users\Rob\Desktop\AWS EC2\python-mega\Section20\mysite>pip3.8 install virtualenv
Requirement already satisfied: virtualenv in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (20.0.20)
Requirement already satisfied: six<2,>=1.9.0 in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from virtualenv) (1.14.0)
Requirement already satisfied: appdirs<2,>=1.4.3 in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from virtualenv) (1.4.4)
Requirement already satisfied: filelock<4,>=3.0.0 in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from virtualenv) (3.0.12)
Requirement already satisfied: distlib<1,>=0.3.0 in c:\users\rob\appdata\local\programs\python\python38\lib\site-packages (from virtualenv) (0.3.0)
***** Update this using QSP4 *****

# Create the virtual environment
C:\Users\Rob\Desktop\AWS EC2\python-mega\Section20\mysite>py -m venv virtual

# Activate the python within the venv
C:\Users\Rob\Desktop\AWS EC2\python-mega\Section20\mysite>virtual\Scripts\python.exe
Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>

# Install Flask within the venv
C:\Users\Rob\Desktop\AWS EC2\python-mega\Section20\mysite>virtual\Scripts\pip install flask
Collecting flask
  Using cached https://files.pythonhosted.org/packages/f2/28/2a03252dfb9ebf377f40fba6a7841b47083260bf8bd8e737b0c6952df83f/Flask-1.1.2-py2.py3-none-any.whl
Collecting click>=5.1 (from flask)
  Using cached https://files.pythonhosted.org/packages/d2/3d/fa76db83bf75c4f8d338c2fd15c8d33fdd7ad23a9b5e57eb6c5de26b430e/click-7.1.2-py2.py3-none-any.whl
Collecting Werkzeug>=0.15 (from flask)
  Using cached https://files.pythonhosted.org/packages/cc/94/5f7079a0e00bd6863ef8f1da638721e9da21e5bacee597595b318f71d62e/Werkzeug-1.0.1-py2.py3-none-any.whl
Collecting Jinja2>=2.10.1 (from flask)
  Downloading https://files.pythonhosted.org/packages/30/9e/f663a2aa66a09d838042ae1a2c5659828bb9b41ea3a6efa20a20fd92b121/Jinja2-2.11.2-py2.py3-none-any.whl (125kB)
     |████████████████████████████████| 133kB 1.6MB/s
Collecting itsdangerous>=0.24 (from flask)
  Using cached https://files.pythonhosted.org/packages/76/ae/44b03b253d6fade317f32c24d100b3b35c2239807046a4c953c7b89fa49e/itsdangerous-1.1.0-py2.py3-none-any.whl
Collecting MarkupSafe>=0.23 (from Jinja2>=2.10.1->flask)
  Using cached https://files.pythonhosted.org/packages/4f/8b/da8a2ae5780d38271ac6e691756fc938cf4df8f225eb8aaced0204304932/MarkupSafe-1.1.1-cp38-cp38-win_amd64.whl
Installing collected packages: click, Werkzeug, MarkupSafe, Jinja2, itsdangerous, flask
Successfully installed Jinja2-2.11.2 MarkupSafe-1.1.1 Werkzeug-1.0.1 click-7.1.2 flask-1.1.2 itsdangerous-1.1.0

# Now run the code within the virtualenv

C:\Users\Rob\Desktop\AWS EC2\python-mega\Section20\mysite>virtual\Scripts\python Demo\script1.py
 * Serving Flask app "script1" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: on
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 186-569-561
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)

 
 ## Section 21: Graphical User Interfaces with Tkinter

# Checking Button() Args
C:\Users\Rob\Desktop\AWS EC2\python-mega\Section21>ipython
Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.13.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from tkinter import *
In [2]: Button?
Init signature: Button(master=None, cnf={}, **kw)
Docstring:      Button widget.
Init docstring:
Construct a button widget with the parent MASTER.

STANDARD OPTIONS

    activebackground, activeforeground, anchor,
    background, bitmap, borderwidth, cursor,
    disabledforeground, font, foreground
    highlightbackground, highlightcolor,
    highlightthickness, image, justify,
    padx, pady, relief, repeatdelay,
    repeatinterval, takefocus, text,
    textvariable, underline, wraplength

# use grid() over pack() as it has more control over Buttons or Widgets


172. Create a Multi-widget GUI (Practice)

Create a Python program that expects a kilogram input value 
and converts that value to grams, pounds, and ounces when 
the user pushes the Convert button.   

The program will look similar to the one in the following picture:
{}

Tip:  
1 kg = 1000 grams  
1 kg = 2.20462 pounds  
1 kg = 35.274 ounces


## Section 21: Interacting with Databases

