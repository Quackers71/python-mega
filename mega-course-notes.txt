# Add this to your ~/.bashrc if you wish

# Q Alias commands
alias ..="cd .."
alias qh="cd /home/Quackers/"
alias l="ls -la"
alias ll="ls -la"
                                                                                                                                                                                       
alias gs="git status"
alias gpus="git push"
alias gpo="git push origin $1"
alias ga.="git add ."
alias gaa="git add --all"
alias gcm="git commit -m $1"
alias gcam="git commit -am $1"
alias gdf="git diff $1"
alias gpul="git pull"
alias grh="git reset --hard $1"
alias gl="git log"
alias glg='git log --pretty=format:"%h %s" --graph'
alias gc="git checkout $1"


Source: The Python Mega Course: https://udemy.com/the-python-mega-course/

https://youtu.be/azcrPFhaY9k - How To Think Like A Programmer
# used for simpleCalc.py & keepGoing.py

## Section 3: The Basics: Data Types

# Variables and Coding Excercise 1 & 2

Coding Excercise 1. Your First Python Excercise (E)
Assign a value to x in the first line, and print out the variable value in the second.

1 x = 1
2 print(x)
3 


Coding Excercise 2. Assign Multiple Values and Print (E)
Assign some values to variables x, y, and z.  Then insert x, y, and z inside a print() function to print out
the values of those variables.

1 x = 1
2 y = 2
3 z = 3
4 print(x, y, z)


Coding Excercise 3. Create Integers, Strings, and Floats (E)
Create three variables mood, strength, and rank and assign a string to mood, a float to strength, and an integer
to rank.  The values you assign can be anything as long as they are the correct type.

1 mood = "god"
2 strength = 52.4
3 rank = 100


Coding Excercise 4. Sum Up Numbers (E)
Assign numbers to x, y, and z.  Calculate the sum of x, y, and z in s.  Print out the value of s.

1 x = 22
2 y = 80.08
3 z = 55
4 s = x + y + z
5 print(s)

13. Ranges
See Ranges.py

Coding Excercise 5. Create List (E)
Assign a list to variable temperatures.  The list should contain a float, integer & a string

temperatures = [13.34, 6, "Hello"]


Coding Excercise 6. Create Complex List (E)
Assign a list to variable rainfall.  The list should contain a float, integer, a string & a list

rainfall = [15.50, 60, "Yo Bitches!", ["Help", 14, 50, 1009.6]]

14. Type Attributes - Output

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section3\typeAttributes.py
Student #1 scored: 9.1

dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__',
 '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__',
 '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__',
 '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count',
  'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']

dir(int)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__',
'__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__',
'__hash__', '__index__', '__init__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__',
'__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__',
'__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__',
'__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__',
'__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag',
 'numerator', 'real', 'to_bytes']     

dir(float)
['__abs__', '__add__', '__bool__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__',
'__floordiv__', '__format__', '__ge__', '__getattribute__', '__getformat__', '__getnewargs__', '__gt__', '__hash__',
'__init__', '__int__', '__le__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__',
'__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__',
'__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setformat__', '__sizeof__', '__str__', '__sub__', '__subclasshook__',
 '__truediv__', '__trunc__', 'as_integer_ratio', 'conjugate', 'fromhex', 'hex', 'imag', 'is_integer', 'real']

dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__',
'__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__',
'__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__',
'__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map',
'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle',
'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex','rjust', 'rpartition',
'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

help(str.upper)
Help on method_descriptor:

upper(...)
    S.upper() -> str

    Return a copy of S converted to uppercase.


help(str.title)
Help on method_descriptor:

title(...)
    S.title() -> str

    Return a titlecased version of S, i.e. words start with title case
    characters, all remaining cased characters have lower case.


"hello".upper()
HELLO

Hello World!

15. Did You Know?
Python got his name not from the snake, but from Monty 
Python's Flying Circus, a favorite comedy series of Guido 
van Rossum, the creator of Python.

16. How to find out what code you need

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section3\listFunctions.py
print(1) is a built-in function
'hello'.upper() is a method
To view a full list of built-in functions use 'dir(__builtins__)'
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError',
'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError',
'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError',
'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError',
'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None',
'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning',
'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',
'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError',
'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError',
'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__build_class__', '__debug__',
'__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool',
'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir',
'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash',
'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max',
'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed',
'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section3\listTypes2.py   
Student #1 scored: 9.1
sum(student_grades) :  25.4
len(student_grades) :  3
The mean of the student_grades :  8.466666666666667

17. Steps of Learning Python

1. Learning the Syntax
2. Knowing the data structure i.e. List or Dict
3. algorithms i.e. using functions and calculations
   https://fiftyexamples.readthedocs.io/en/latest/algorithms.html


Coding Excercise 7. Calculate Maximum (E)

Complete the script so that it prints out the maximum value of student_grades. 
Find the appropiate function or method.

student_grades = [9.1, 8.8, 7.5]
max_value = max(student_grades)
print(max_value)


Coding Excercise 8. Count Values (E)

Find the proper function or method that counts how many 10.0 items there are in the student_grades and 
print out the output using a print() function.

student_grades = [9.1, 8.8, 10.0, 7.7, 6.8, 8.0, 10.0, 8.1, 10.0, 9.9]
print(student_grades.count(10.0))


Coding Excercise 9. Modify String (E)

Find the proper function or method that converts the string in username into lowercase letters and 
prints out the output.

username = "Python3"
print(username.lower())

19. Did You Know?
Did you know that Python was first released in  1991?
Python 2 was released in 2000, and Python 3 (the current 
version) in 2008.


Coding Excercise 10. Create Dictionary (E)
Assign dict to variable day_temperatures. The dict should contain three keys, each key should
have a float as the value

day_temperatures = {"morning": 9.00, "noon": 12.00, "evening": 18.00}

20. Tuple Types

monday_temperatures = {1, 4, 5}   Tuple = immutable
monday_temperatures2 = [1, 4, 5]   List = mutable # meaning you can add more items to the list
monday_temperatures2.append(6)

# Output
PS C:\Users\fcukq\Desktop\python-mega> py -3 .\Section3\tupleTypes.py
This is a Tuple
monday_temperatures = {1, 4, 5}
{1, 4, 5}

Three Tuples as items
monday_temperatures = ((2,20, 200), (6, 60, 600), (9, 90, 900))
((2, 20, 200), (6, 60, 600), (9, 90, 900))

Tuples are immutable meaning they cannot be changed

This is a List
monday_temperatures2 = [1, 4, 5]
[1, 4, 5]

monday_temperatures2.append(9)
The List is now:  [1, 4, 5, 9]

Lists and Dictonaries are mutable

This is a Dictionary
monday_temperatures3 = {"temp1": 1, "temp2": 4, "temp3": 5}
{'temp1': 1, 'temp2': 4, 'temp3': 5}

output of the dict.values in a for loop
1
4
5


Coding Excercise 11. Create Tuple (E)
Create a color_codes variable and assign a tuple to it.  The Tuple should contain three tuples as items.

color_codes =  ((2,20, 200), (6, 60, 600), (9, 90, 900))


Coding Excercise 12. Create Complex Dictionary (E)
Assign a dictionary to variable day_temperatures.  The dictionary should contatin three keys: 'morning', 
'noon', and 'evening' and each key should contain a tuple as value.  Each tuple should contain three floats.

day_temperatures = {'morning': (1.2, 1.3, 1.4), 'noon': (2.2, 2.3, 2.4) , 'evening': (5.2, 5.3, 5.4)}

22. Did You Know?
Python is mainly used for automation purposes, web apps, and data science.
Many big companies like Instagram, Facebook, and Amazon use Python in different 
parts of their products. For example, Facebook uses Python to process images.

23. Summary: Integers, Floats, Lists, Dictionaries, Tuples, dir, help
In this section you learned that:

Integers are for representing whole numbers:

rank = 10
eggs = 12
people = 3
Floats represent continuous values:

temperature = 10.2
rainfall = 5.98
elevation = 1031.88
Strings represent any text:

message = "Welcome to our online shop!"
name = "John"
serial = "R001991981SW"
Lists represent arrays of values that may change during the course of the program:

members = ["Sim Soony", "Marry Roundknee", "Jack Corridor"]
pixel_values = [252, 251, 251, 253, 250, 248, 247]
Dictionaries represent pairs of keys and values:

phone_numbers = {"John Smith": "+37682929928", "Marry Simpons": "+423998200919"}
volcano_elevations = {"Glacier Peak": 3213.9, "Rainer": 4392.1}
Keys of a dictionary can be extracted with:

phone_numbers.keys()
Values of a dictionary can be extracted with:

phone_numbers.values()
Tuples represent arrays of values that are not to be changed during the course of the program:

vowels = ('a', 'e', 'i', 'o', 'u')
one_digits = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
To find out what attributes a type has:

dir(str)
dir(list)
dir(dict)
To find out what Python builtin functions there are:

dir(__builtins__)
Documentation for a Python command can be found with:

help(str)
help(str.replace)
help(dict.values)

## Section 4: The Basics: Operations with Data Types

25. More Operations with Lists

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python
Python 3.5.0 (v3.5.0:374f501f4567, Sep 13 2015, 02:27:37) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> monday_temperatures = [9.1, 8.8, 7.5]
>>> monday_temperatures.append(8.1)  
>>> monday_temperatures
[9.1, 8.8, 7.5, 8.1]
>>> monday_temperatures.clear()     
>>> monday_temperatures
[]  
>>> monday_temperatures = [9.1, 8.8, 7.5]
>>> monday_temperatures                   
[9.1, 8.8, 7.5]
>>> monday_temperatures.index(8.8) 
1   
>>> monday_temperatures.index(8.8, 1) 
1   
>>> monday_temperatures.index(8.8, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 8.8 is not in list
>>>


Coding Excercise 13. Append Item to List (E)
Append the value if current to the end of the list seconds. Please use the list.append() method to do that.

seconds = [1.2323442655, 1.4534345567, 1.023458894]
current = 1.10001399445
seconds.append(current)


Coding Excercise 14. Remove Item from List (E)
Remove item 1.4534345567 from seconds

seconds = [1.2323442655, 1.4534345567, 1.023458894, 1.10001399445]
seconds.remove(1.4534345567)


Coding Excercise 15. Remove Three Items from List (E)
Remove Items 1.4534345567, 1.023458894 ,and 1.10001399445 from seconds

seconds = [1.2323442655, 1.4534345567, 1.023458894, 1.10001399445]
seconds = [1.2323442655, 1.4534345567, 1.023458894, 1.10001399445]
seconds.remove(1.4534345567)
seconds.remove(1.023458894)
seconds.remove(1.10001399445)

26. Accessing List Items

>>> monday_temperatures.__getitem__(1)
8.8
>>> monday_temperatures[1]             
8.8
>>>

Coding Excercise 16. Access Item (E)
Complete the script so that it prints out the 3rd item of list serials

serials = ["RH80810A", "AA899819A", "XYSA9099400", "OOP8988459", "EEO8904882", "KOC9889482"]
print(serials[2])

Coding Excercise 17. Access Items (E)
Complete the script so that it prints out the 1st, the 3rd, and the 6th items of list serials

serials = ["RH80810A", "AA899819A", "XYSA9099400", "OOP8988459", "EEO8904882", "KOC9889482"]
print(serials[0], serials[2], serials[5])

Coding Excercise 18. Access and Append (E)
Append the first item of weekend to workdays.

workdays = ["Mon", "Tue", "Wed", "Thu", "Fri"]
weekend = ["Sat", "Sun"]
workdays.append(weekend[0])

27. Accessing List Slices 

>>> monday_temperatures = [9.1, 8.8, 7.5, 6.6, 9.9] 
>>> len(monday_temperatures)
5
>>> monday_temperatures[2]     
7.5
>>> monday_temperatures[1:4] 
[8.8, 7.5, 6.6]
>>> monday_temperatures[3:5] 
[6.6, 9.9]
>>> monday_temperatures[3:]  
[6.6, 9.9]
>>> monday_temperatures[0:2] 
[9.1, 8.8]
>>> monday_temperatures[:2]
[9.1, 8.8]

28. Accessing Items and Slices with Negative Indexes

>>> monday_temperatures[-1] 
9.9
>>> monday_temperatures[-2:] 
[6.6, 9.9]
>>> monday_temperatures[-4:-2] 
[8.8, 7.5]

29. Accessing Characters and Slices in Strings

>>> mystring = "Hello"
>>> mystring[1]
'e'
>>> mystring[-1] 
'o'
>>> mystring[:3] 
'Hel'
>>> monday_temperatures = ['hello', 1, 2, 3]
>>> monday_temperatures[0]    
'hello'
>>> monday_temperatures[0][2]
'l'

Quiz 1: Accessing and Slicing Listrs and Strings

Question 1:
What would the following code return?
'abcdef'[:3]
Answer: 'abc'

Question 2:
Which of the following outputs 'cd'?
Answer: 'abcdef'[2:4]

Question 3:
Select the correct output for 'abcdef'[-2:]
Answer: 'ef'

Question 4:
What does the code ['abc' , 'def', 'ghi', 'jkl', 'mno'][-2][-2] output?
Answer: 'k'

Great job! You are ready to move on to the next lecture.
You got 4 out of 4 correct on the first attempt.


Coding Excercise 19. Slicing a List, 2nd to 4th (E)
Print out the slice ['b', 'c', 'd'] of the letters list

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(letters[1:4])


Coding Excercise 20. Slicing a List, First Three (E)
Print out the slice ['a', 'b', 'c'] of the letters list

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(letters[:3])


Coding Excercise 21. Slicing a List, Last Three (E)
Print out the slice ['e', 'f', 'g'] of the letters list

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(letters[-3:])

30. Accessing Items in Dictionaries

>>> student_grades = {"Kylie": 9.1, "Eva": 8.8, "Tarquin": 7.5}
>>> student_grades.keys() 
dict_keys(['Kylie', 'Tarquin', 'Eva'])
>>> student_grades.values() 
dict_values([9.1, 7.5, 8.8])
>>> eng_port = {"rain": "chuva", "sun": "sol"}
>>> eng_port["sun"]
'sol'

31. Summary: Positive/Negative Indexes, Slicing
In this section you learned that:

Lists, strings, and tuples have a positive index system:

["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
   0      1      2      3      4      5      6
And a negative index system:

["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
  -7     -6     -5     -4     -3     -2     -1
In a list, the 2nd, 3rd, and 4th items can be accessed with:

days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
days[1:4]
Output: ['Tue', 'Wed', 'Thu']
First three items of a list:

days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
days[:3]
Output:['Mon', 'Tue', 'Wed'] 
Last three items of a list:

days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
days[-3:]
Output: ['Fri', 'Sat', 'Sun']
Everything but the last:

days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
days[:-1] 
Output: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'] 
Everything but the last two:

days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
days[:-2] 
Output: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'] 
A single in a dictionary can be accessed using its key:

phone_numbers = {"John Smith":"+37682929928","Marry Simpsons":"+423998200919"}
phone_numbers["Marry Simpsons"]
Output: '+423998200919'

# Section 5: The Basics: Functions and Conditionals


Coding Excercise 22. Lengther (E)
Complete the lengther function definition so that is returns the number of items for every input 1st.
Note. You don't have to call the function unless you are explicitly required to do so.  Definin the 
function is enough.  However, if you like to call your function under your function definition, that's
fine too.

def lengther(lst):
    return len(lst)


Coding Excercise 23. Square Area (E)
Define a function that calculates the area of a sqaure.
For example, if I was to call your function with foo(7) the output would be 49.  If I called it with 
foo(3) it would return 9, and so on.
Note that you don't have to name your function foo.  Give it any name you want.

def foo(i):
    i = i * i
    return i

Solution.py was

def foo(a):
    return a * a


Coding Excercise 24. Volume Converter (E)
Define a function that converts fluid ounces to mililitres knowing that 1 fluid ounce is equal to 29.57353 
mililitres.  For example, I was to call your function with foo(1) I would get an output of 29.57353.  If I
called it with foo(5) I would get 147.86765, and so on.

def foo(oz):
    return oz * 29.57353

33. Print or Return?
.\Section5\mean.py  # updated
N.B. Always use return in your functions

34. Intro to Conditionals

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section5\mean.py
Function started!
Traceback (most recent call last):
  File ".\Section5\mean.py", line 7, in <module>
    print(mean(student_grades))
  File ".\Section5\mean.py", line 3, in mean
    the_mean = sum(mylist) / len(mylist)
TypeError: unsupported operand type(s) for +: 'int' and 'str'

35. If Conditional Example
.\Section5\mean.py  # updated
Now contains an if / else

36. Bonus Code: Using "and" and "or" in a Conditional

You learned to check for one single condition:
x = 1
 
if x == 1:
    print("Yes")
else:
    print("No")

You can also check if two conditions are met at the same time using an and operator:
x = 1
y = 1
 
if x == 1 and y==1:
    print("Yes")
else:
    print("No")
That will return Yes since x == 1 and y ==1 are both True.

You can also check if one of two conditions are met using an or operator:
x = 1
y = 1
 
if x == 1 or y==2:
    print("Yes")
else:
    print("No")
That will return Yes since at least one of the conditions is True. In this case x == 1 is True.

37. Conditional Explained Line by Line
.\Section5\mean.py  # updated
Now running the function for the dictionary

Quiz 2. Conditionals Quiz

Question 1:
What does the following code output?

x = -10
if x * 2 > x:
    print("Greater")
else:
    print("Less or Equal")

Answer: Less or Equal
x is -10 and x * 2 would be -20 and -20 is not greater than -10.

Question 2:
What would the following code output?

def foo(x, array):
    if x in array:
        return True
    else:
        return False
 
print(foo(1, [1, 2, 3]))
print(foo(1, [2, 3]))
print(foo(1, ['1', 2, 3]))

Answer:
True
False
False
1 is actually in the list [1, 2, 3], therefore, the first output is True. 1 is not in [2, 3], 
so the second output is False. 1 is not in ['1', 2, 3], so the third output is also False. 
Note the third list has '1', but not 1. 1 is not the same as '1'. They are of different types.

Question 3:
Check the code that has a correct syntax.

Answer: #4 
def check_username(username):
    if len(username) > 4:
        return "Successfull!"
    else:
        return "Try another username"

Question 4:
What is true about the following code?

if isinstance(x, int) or isinstance(x, float) or x=='1':
    print("Valid type!")
else:
    print("Not valid!")

Answer: The code prints out Valid type! if x has a value of '1'.
Correct! If any of the conditions in line 1 is met, the code will execute line 2. In other words, 
if x has a value of '1' that means one of the conditions in line 1 was met.

Great job! You are ready to move on to the next lecture.
You got 4 out of 4 correct on the first attempt.

38. More on Conditionals

PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section5\mean.py
mean(student_grades) : 8.466666666666667
3 is greater than 1
type(3) == int : True
isinstance(3, int) : True


Coding Excercise 25. Password Controller (E)
Define a function that:
(1) takes a string as a parameter
(2) returns False if the string contains less than 8 characters
(3) returns True if the string contains 8 or more characters
If I called your function with foo(mypass) it would return.  If I called it foo("mylongpassword") 
it would return True, and so on.


Coding Excercise 26. Warm or Cold (E)
Define a function that:
(1) takes a temperature as a parameter
(2) returns Warm if the temperature is greater than 7
(3) returns Cold if the temperature is equal or less than 7
If I called your function with foo(10) it would return Warm.  If I called it foo(7) or foo(5)
it would return Cold in both cases, and so on.


Coding Excercise 27. Hot, Warm, Cold (E)
Define a function that:
(1) takes a temperature as a parameter
(2) returns Hot if the temperature is greater than 25
(3) returns Warm if the temperature is between 15 and 25, including 15 and 25.
(4) returns Cold if the temperature is less than 15
If I called your function with foo(10) it would return Cold.  
foo(15) or foo(16) or foo(25) would all return Warm and foo(26) would return Hot.

41. Summary of Section5: Functions and Conditionals
In this section you learned to:

Define a function:

def cube_volume(a):
    return a * a * a
Write a conditional block:

message = "hello there"
 
if "hello" in message:
    print("hi")
else:
    print("I don't understand")
Write a conditional block of multiple conditions:

message = "hello there"
 
if "hello" in message:
    print("hi")
elif "hi" in message:
    print("hi")
elif "hey" in message:
    print("hi")
else:
    print("I don't understand")
Use the and operator to check if both conditions are True at the same time:

x = 1
y = 1
 
if x == 1 and y==1:
    print("Yes")
else:
    print("No")
Output is Yes since both x and y are 1.

Use the or operator to check if at least one condition is True:

x = 1
y = 2
 
if x == 1 or y==2:
    print("Yes")
else:
    print("No")
Output is Yes since x is 1.

Check if a value is of a certain type with:

isinstance("abc", str)
isinstance([1, 2, 3], list)
or

type("abc") == str
type([1, 2, 3]) == lst

# Section 6: The Basics: Processing User Input

42. User Input
PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section6\userInput.py
Enter a temperature :7
Cold
PS C:\Users\Rob\Desktop\AWS EC2\python-mega> python .\Section6\userInput.py
Enter a temperature :7.2
Warm


Coding Excercise 28. String Formatting (E)

Implement a function that gets a person's name as a parameter and greets the person with Hi Person. For example, 
if I called your function with foo("Smithy") the function should return Hi Smithy.

Note: If you were to use the f"string" syntax for this exercise you would get an error because f-strings were
introduced in Python 3.6 and the Udemy server uses Python 3.5.  You might want to use the "%s" syntax instead 
which works with the older versions of Python.  This scenario actually happens often in real lift where servers 
might have an older version of Python so you should be aware and adjust your code accordingly.  You can review 
the string formatting lecture if you forgot the syntax. 
- https://www.udemy.com/course/the-python-mega-course/learn/lecture/15584244#overview

def foo(name):
    return "Hi %s" % name

foo("Smithy")


Coding Excercise 29. String Formatting and Uppercase (E)

Implement a function that gets a person's name as a parameter and greets the person with Hi Person. The first 
letter should always be uppercase.  For example, if I called your function with foo("Smithy") or foo("smithy")
the function should return Hi Smithy.

Note: If you were to use the f"string" syntax for this exercise you would get an error because f-strings were
introduced in Python 3.6 and the Udemy server uses Python 3.5.  You might want to use the "%s" syntax instead 
which works with the older versions of Python.  This scenario actually happens often in real lift where servers 
might have an older version of Python so you should be aware and adjust your code accordingly.  You can review 
the string formatting lecture if you forgot the syntax. 
- https://www.udemy.com/course/the-python-mega-course/learn/lecture/15584244#overview

def foo(name):
    return "Hi %s" % name.title()

foo("smithy")

45. Summary: Processing User Input
In this section you learned that:

A Python program can get user input via the input function:

The input function halts the execution of the program and gets text input from the user:

name = input("Enter your name: ")
The input function converts any input to a string, but you can convert it back to int or float:

experience_months = input("Enter your experience in months: ")
experience_years = int(experience_months) / 12
You can format strings with (works both on Python 2 and 3):

name = "Sim"
experience_years = 1.5
print("Hi %s, you have %s years of experience." % (name, experience_years))

Output: Hi Sim, you have 1.5 years of experience.

You can also format strings with (Python 3 only):

name = "Sim"
experience_years = 1.5
print("Hi {}, you have {} years of experience".format(name, experience_years))

Output: Hi Sim, you have 1.5 years of experience.


Coding Excercise 30: Loop Over Colours (E)
Loop over the colours items and print the item in every loop.  So, the expected
output of your code would be:
11
34
98
43
45
54
54

colours = [11, 34, 98, 43, 45, 54, 54]

for cl in colours:
    print(cl)


Coding Excercise 31: Loop Over Big Colours (E)
Loop over the colours items and print the item in every loop only if the item is greater then 50.  
So, the expected output of your code would be:
98
54
54

colours = [11, 34, 98, 43, 45, 54, 54]

for cl in colours:
    if cl > 50:
        print(cl)


Coding Excercise 32: Loop Over Integer Colours (E)
Loop over the colours items and print the item in every loop only if the item is an integer.  
So, the expected output of your code would be:
11
43
54
54

colours = [11, 34.1, 98.2, 43, 45.1, 54, 54]

for cl in colours:
    if isinstance(cl, int):
        print(cl)


Coding Excercise 33: Loop Over Integer and BIg Colours (E)
Loop over the colours items and print the item in every loop only if the item is an integer and 
is greater than 50.  So, the expected output of your code would be:
54
54

colours = [11, 34.1, 98.2, 43, 45.1, 54, 54]

for cl in colours:
    if isinstance(cl, int):
        print(cl)

47. For Loop Over a Function
Note that using loops you can call any function multiple times, even your own functions. Let's suppose we defined this function:

def celsius_to_kelvin(cels):
    return cels + 273.15
That is a function that gets a number as input, adds 273.15 to it and returns the result. A for loop allows us to execute that function over a list of numbers:

monday_temperatures = [9.1, 8.8, -270.15]
 
for temperature in monday_temperatures:
    print(celsius_to_kelvin(temperature))
The output of that would be:

282.25
281.95
3.0

So, in the first iteration celsius_to_kelvin(9.1) was executed, in the second celsius_to_kelvin(8.8) and in the third celsius_to_kelvin(-270.15).

That's just something to keep in mind.

48. Did You Know?
Python comes pre-installed on Linux and Mac operating systems. In May 2019, Windows 10 also launched an update which also have Python pre-installed. 
That is an added endorsement for Python.

50. Bonus Code: Dictionary Loop and String Formatting
You can combine a dictionary for loop with string formatting to create text containing information from the dictionary:

phone_numbers = {"John Smith": "+37682929928", "Marry Simpons": "+423998200919"}
 
for pair in phone_numbers.items():
    print("{} has as phone number {}".format(pair[0], pair[1]))


Another (better) way to do it::

phone_numbers = {"John Smith": "+37682929928", "Marry Simpons": "+423998200919"}
 
for key, value in phone_numbers.items():
    print("{} has as phone number {}".format(key, value))
In both cases the output is:

Output:

John Smith has as phone number +37682929928

Marry Simpons has as phone number +423998200919


Coding Excercise 34: Loop Over Dictionary and Format (E)

Make the code print out the following output using a for loop:

John Smith: +37682929928
Marry Simpons: +423998200919

So, the code should loop over the dictionary items and in each iteration should print 
out the dictionary key, a colon, a space, and the corresponding value.

Note: If you plan to use string formatting here, please be aware that Udemy uses Python 
3.5 and the f"{}" syntax only works with Python 3.6+. Consider using the "%s" syntax instead.

phone_numbers = {"John Smith": "+37682929928", "Marry Simpons": "+423998200919"}

for details in phone_numbers.items():
    print("%s: %s" % (details[0], details[1]))


Coding Excercise 35: Loop Over Dictionary and Replace (E)

Loop over the phone_numbers values and in each loop print out the phone number, but 
with '00' instead of '+'.  In other words, your code should output:

0037682929928
00423998200919

phone_numbers = {"John Smith": "+37682929928", "Marry Simpons": "+423998200919"}

for details in phone_numbers.items():
    print("%s" % (details[1]).replace('+', '00'))
    #print("{}").format(details[1]).replace('+', '00')

Quiz 3. While loops

Question 1:
What will the following code output?

a = 10
while a > 0:
    x = a + 1
    print(x)

Answer: 
11
11
11
11
11

Good job!
The while loop checks if a is greater than 0. That's always true since a is 10. 
Then the loops performs x = 10 + 1 and then prints x which happens to be 11, always.

Question 2:
What does the following code output?

a = 0
while a < 5:
    a = a + 1
    print(a)

Answer: 
1
2
3
4
5

Good job!
At first a is 0. The loop checks if a is less than 5, which is true in the first iteration. 
Then, a = a + 1 adds 1 to a, so now a is 1 and 1 is printed out. The next loop does a = 1 + 1 so a becomes 2. 
The third loop does a = 2 + 1, so a becomes 3 and so the loop continues until a is not less than 5 anymore.

Great job! You are ready to move on to the next lecture.
You got 2 out of 2 correct on the first attempt.

54. Summary: Loops
In this section you learned that:

For loops are useful for executing a command over a large number of items.

You can create a for loop like so:

for letter in 'abc':
    print(letter.upper())
Output:

A
B
C

The name after for (e.g. letter) is just a variable name



You can loop over dictionary keys:

phone_numbers = {"John Smith":"+37682929928","Marry Simpons":"+423998200919"}
for value in phone_numbers.keys():
    print(value)
Output:

John Smith
Marry Simpsons

You can loop over dictionary values:

phone_numbers = {"John Smith":"+37682929928","Marry Simpons":"+423998200919"}
for value in phone_numbers.values():
    print(value)
Output:

+37682929928
+423998200919

You can loop over dictionary items:

phone_numbers = {"John Smith":"+37682929928","Marry Simpons":"+423998200919"}
for key, value in phone_numbers.items():
    print(key, value)
Output: 

('John Smith', '+37682929928')

('Marry Simpons', '+423998200919')



While loops will run as long as a condition is true:

while datetime.datetime.now() < datetime.datetime(2090, 8, 20, 19, 30, 20):
    print("It's not yet 19:30:20 of 2090.8.20")
The loop above will print out the string inside print() over and over again until the 20th of August, 2090.

Tested the above using:

import datetime

while datetime.datetime.now() < datetime.datetime(2020, 2, 29, 9, 40, 00):
    print("It's not yet 09:40:00 of 2020.2.29")

Output:

It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
It's not yet 09:40:00 of 2020.2.29
PS C:\Users\fcukq\Desktop\python-mega\Section7> date

29 February 2020 09:40:02

Section 8: Building a Program

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section8> py -3 .\textPro.py
Say something: Hello
Say something: how are you
Say something: what day again
Say something: why me
Say something: bye
Say something: \end
Hello. How are you? What day again? Why me? Bye.

Section 9: List Comprehensions

60. Simple List Comprehension

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section9> py -3 .\preListComprehension.py 
[22.1, 23.4, 34.0, 23.0]

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section9> py -3 .\listComprehension.py
[22.1, 23.4, 34.0, 23.0]


Coding Excercise 36: Only Numbers (E)

Define a function that takes as a parameter list that contains both numbers and strings and 
returns the list containing only the numbers.  For example, if I called your function with 
foo([99, 'no data', 95, 94, 'no data']) it should return [99, 95, 94].

def foo(lst):
    return [i for i in lst if not isinstance(i, str)]
    
foo([99, 'no data', 95, 94, 'no data'])

Ex 36. Alternative way to solve and output the values below:

def foo(lst):
    nums = []
    for i in lst: 
        if not isinstance(i, str):
            nums.append(i)
            print(i)
    return nums

foo([99, 'no data', 95, 94, 'no data'])

""" For comparison, here is a different way to solve this quiz-challenge. 
It uses both a for-loop and an if-test. The solution loops and appends 
only the numeric values from lst to a 2nd list variable that I've named nums: """

Output:
PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section9> py -3 .\listCompTest.py       
99
95
94


Coding Excercise 36: Only Positive Numbers (E)

Define a function that takes as a parameter list that containing only the numbers that are greater than 0.  
For example, if I called your function with foo([-5, 3, -1, 101]) it should return [3, 101].

def foo(lst):
    return [i for i in lst if i > 0]

foo([-5, 3, -1, 101])

Ex 37. Again an alternative way to solve and output the values below:

def foo(lst):
    nums = []
    for i in lst: 
        if i > 0:
            nums.append(i)
            print(i)

foo([-5, 3, -1, 101])

Output:

PS C:\Users\Rob\Desktop\AWS EC2\python-mega\Section9> py -3 .\listCompTest2.py
3
101
